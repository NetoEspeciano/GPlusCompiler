
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Asintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Asintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Asintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Asintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\002\002\004\000\002\002\010\000\002\002" +
    "\003\000\002\002\011\000\002\002\010\000\002\002\011" +
    "\000\002\002\010\000\002\002\011\000\002\002\010\000" +
    "\002\002\011\000\002\002\010\000\002\003\003\000\002" +
    "\003\005\000\002\003\006\000\002\003\005\000\002\003" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\006" +
    "\000\002\003\006\000\002\003\005\000\002\003\005\000" +
    "\002\052\004\000\002\052\004\000\002\052\005\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\052\005\000\002\052\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\005\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\005\000\002\011\003\000\002" +
    "\011\005\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\013\003\000\002\013\004" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\013\004\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\051\003\000\002\051\005\000\002\051\005" +
    "\000\002\051\003\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\050\003\000\002\050\003\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\020\017\000\002\020\017\000\002" +
    "\020\017\000\002\020\017\000\002\020\017\000\002\020" +
    "\017\000\002\020\017\000\002\020\017\000\002\020\017" +
    "\000\002\020\017\000\002\020\017\000\002\020\017\000" +
    "\002\020\017\000\002\020\017\000\002\021\012\000\002" +
    "\021\012\000\002\021\012\000\002\021\012\000\002\021" +
    "\012\000\002\021\012\000\002\021\012\000\002\021\012" +
    "\000\002\021\012\000\002\026\003\000\002\026\005\000" +
    "\002\026\003\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\022\013\000\002\022\013\000\002\022" +
    "\013\000\002\022\013\000\002\022\013\000\002\022\013" +
    "\000\002\022\013\000\002\022\013\000\002\022\013\000" +
    "\002\027\053\000\002\027\053\000\002\027\053\000\002" +
    "\027\053\000\002\027\053\000\002\027\053\000\002\027" +
    "\053\000\002\027\053\000\002\027\053\000\002\027\053" +
    "\000\002\027\053\000\002\027\053\000\002\027\053\000" +
    "\002\027\053\000\002\027\053\000\002\027\053\000\002" +
    "\027\053\000\002\027\053\000\002\027\053\000\002\027" +
    "\053\000\002\027\053\000\002\027\053\000\002\027\053" +
    "\000\002\027\053\000\002\027\053\000\002\027\053\000" +
    "\002\027\053\000\002\027\053\000\002\027\053\000\002" +
    "\027\053\000\002\027\053\000\002\027\053\000\002\027" +
    "\053\000\002\027\053\000\002\027\053\000\002\027\053" +
    "\000\002\027\053\000\002\027\053\000\002\027\053\000" +
    "\002\027\053\000\002\027\053\000\002\027\053\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\004\000\002\017\003\000\002\017\004\000\002\032\003" +
    "\000\002\032\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\024\017\000\002\024" +
    "\017\000\002\024\017\000\002\024\017\000\002\024\017" +
    "\000\002\024\017\000\002\024\017\000\002\024\017\000" +
    "\002\024\017\000\002\024\017\000\002\024\017\000\002" +
    "\024\017\000\002\024\017\000\002\025\003\000\002\025" +
    "\003\000\002\033\003\000\002\033\003\000\002\037\007" +
    "\000\002\037\007\000\002\037\007\000\002\037\007\000" +
    "\002\037\007\000\002\040\007\000\002\040\007\000\002" +
    "\040\007\000\002\040\007\000\002\040\010\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\041\007" +
    "\000\002\041\007\000\002\041\007\000\002\041\007\000" +
    "\002\041\007\000\002\042\007\000\002\042\007\000\002" +
    "\042\007\000\002\042\007\000\002\042\007\000\002\043" +
    "\007\000\002\043\007\000\002\043\007\000\002\043\007" +
    "\000\002\043\007\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\044\011\000\002\044\011\000\002" +
    "\044\011\000\002\044\011\000\002\044\011\000\002\044" +
    "\011\000\002\044\011\000\002\045\007\000\002\045\007" +
    "\000\002\045\007\000\002\045\007\000\002\045\007\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\023\003\000\002\023\003\000\002" +
    "\030\010\000\002\030\013\000\002\030\010\000\002\030" +
    "\010\000\002\030\010\000\002\030\011\000\002\036\007" +
    "\000\002\036\007\000\002\036\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0686\000\006\003\005\004\004\001\002\000\006\003" +
    "\u0671\005\u0670\001\002\000\010\002\uffff\004\010\005\011" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\004\005\u066b\001\002\000\016\003\021\006\015" +
    "\027\023\030\020\031\013\107\017\001\002\000\006\003" +
    "\u0667\007\u0668\001\002\000\006\003\uffdc\107\uffdc\001\002" +
    "\000\004\010\171\001\002\000\006\003\ufff6\010\ufff6\001" +
    "\002\000\006\003\161\107\160\001\002\000\006\003\153" +
    "\011\154\001\002\000\006\003\uffdd\107\uffdd\001\002\000" +
    "\014\003\ufff2\007\032\010\ufff2\011\031\107\030\001\002" +
    "\000\006\003\024\007\025\001\002\000\006\003\uffde\107" +
    "\uffde\001\002\000\016\003\021\006\015\027\023\030\020" +
    "\031\013\107\017\001\002\000\016\003\021\006\015\027" +
    "\023\030\020\031\013\107\017\001\002\000\006\003\ufff5" +
    "\010\ufff5\001\002\000\006\003\ufff0\010\ufff0\001\002\000" +
    "\006\003\uffa3\007\uffa3\001\002\000\022\003\047\012\045" +
    "\014\050\047\037\050\043\107\046\110\040\111\034\001" +
    "\002\000\016\003\021\006\015\027\023\030\020\031\013" +
    "\107\017\001\002\000\006\003\ufff1\010\ufff1\001\002\000" +
    "\030\003\uffd9\007\uffd9\013\uffd9\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\001\002\000" +
    "\014\003\uffbc\007\uffbc\013\uffbc\015\uffbc\016\uffbc\001\002" +
    "\000\010\003\uffd6\007\uffd6\013\uffd6\001\002\000\014\003" +
    "\uffd8\007\uffd8\013\uffd8\015\uffca\016\uffca\001\002\000\016" +
    "\003\uffcd\007\uffcd\013\uffcd\025\uffcd\034\uffcd\042\uffcd\001" +
    "\002\000\022\003\uffd5\007\uffd5\017\112\020\113\021\117" +
    "\022\114\023\115\024\120\001\002\000\036\003\146\007" +
    "\uffb0\013\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\077\026\071\034\uffb0\001" +
    "\002\000\014\003\uffd7\007\uffd7\013\uffd7\015\uffc9\016\uffc9" +
    "\001\002\000\012\003\104\007\uffd3\015\101\016\072\001" +
    "\002\000\022\003\143\012\045\014\050\047\037\050\043" +
    "\107\046\110\040\111\034\001\002\000\034\003\uffda\007" +
    "\uffda\013\uffda\015\uffc8\016\uffc8\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffcc\026\uffa5\001\002\000" +
    "\046\003\076\007\uffd2\012\066\014\050\015\101\016\072" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\077\026\071\047\062\050\065\107\067\111\061\001\002" +
    "\000\020\003\070\012\066\014\050\047\062\050\065\107" +
    "\067\111\061\001\002\000\016\003\054\007\uffd1\013\uffd1" +
    "\025\053\034\uffd1\042\uffd1\001\002\000\006\003\uffe1\007" +
    "\uffe1\001\002\000\010\003\056\107\055\110\040\001\002" +
    "\000\010\003\056\107\055\110\040\001\002\000\016\003" +
    "\uffcc\007\uffcc\013\uffcc\025\uffcc\034\uffcc\042\uffcc\001\002" +
    "\000\016\003\uffcf\007\uffcf\013\uffcf\025\uffcb\034\uffcf\042" +
    "\uffcf\001\002\000\014\003\uffce\007\uffce\013\uffce\034\uffce" +
    "\042\uffce\001\002\000\014\003\uffd0\007\uffd0\013\uffd0\034" +
    "\uffd0\042\uffd0\001\002\000\036\003\uffa6\007\uffa6\013\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\034\uffa6\001\002\000\014" +
    "\003\uffca\007\uffca\013\uffca\015\uffca\016\uffca\001\002\000" +
    "\016\017\112\020\113\021\117\022\114\023\115\024\120" +
    "\001\002\000\014\003\104\007\uffbb\013\uffbb\015\101\016" +
    "\072\001\002\000\014\003\uffc9\007\uffc9\013\uffc9\015\uffc9" +
    "\016\uffc9\001\002\000\020\003\136\012\066\014\050\047" +
    "\062\050\065\107\067\111\061\001\002\000\034\003\uffc8" +
    "\007\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\001\002" +
    "\000\050\003\076\007\uffc7\012\066\013\uffc7\014\050\015" +
    "\101\016\072\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\077\026\071\047\062\050\065\107\067\111" +
    "\061\001\002\000\012\003\uffc5\012\uffc5\107\uffc5\111\uffc5" +
    "\001\002\000\020\003\uffc3\012\uffc3\014\uffc3\047\uffc3\050" +
    "\uffc3\107\uffc3\111\uffc3\001\002\000\020\003\076\012\066" +
    "\014\050\047\062\050\065\107\067\111\061\001\002\000" +
    "\020\013\121\017\112\020\113\021\117\022\114\023\115" +
    "\024\120\001\002\000\012\003\104\013\105\015\101\016" +
    "\072\001\002\000\050\003\076\007\uffc7\012\066\013\uffc7" +
    "\014\050\015\101\016\072\017\uffad\020\uffad\021\uffad\022" +
    "\uffad\023\uffad\024\uffad\025\077\026\071\047\062\050\065" +
    "\107\067\111\061\001\002\000\012\003\uffc6\012\uffc6\107" +
    "\uffc6\111\uffc6\001\002\000\006\107\102\111\061\001\002" +
    "\000\020\003\uffc4\012\uffc4\014\uffc4\047\uffc4\050\uffc4\107" +
    "\uffc4\111\uffc4\001\002\000\036\003\uffa5\007\uffa5\013\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\034\uffa5\001\002\000\032" +
    "\003\uffac\007\uffac\013\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\034\uffac\001\002" +
    "\000\020\003\076\012\066\014\050\047\062\050\065\107" +
    "\067\111\061\001\002\000\014\003\uffb2\007\uffb2\013\uffb2" +
    "\015\uffb2\016\uffb2\001\002\000\020\003\110\012\066\014" +
    "\050\047\062\050\065\107\067\111\061\001\002\000\014" +
    "\003\104\007\uffb8\013\uffb8\015\101\016\072\001\002\000" +
    "\050\003\076\007\uffc7\012\066\013\uffc7\014\050\015\101" +
    "\016\072\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\077\026\071\047\062\050\065\107\067\111\061" +
    "\001\002\000\014\003\104\007\uffb3\013\uffb3\015\101\016" +
    "\072\001\002\000\012\003\uffc2\012\uffc2\107\uffc2\111\uffc2" +
    "\001\002\000\012\003\uffc1\012\uffc1\107\uffc1\111\uffc1\001" +
    "\002\000\012\003\uffbf\012\uffbf\107\uffbf\111\uffbf\001\002" +
    "\000\012\003\uffbe\012\uffbe\107\uffbe\111\uffbe\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\012" +
    "\003\uffc0\012\uffc0\107\uffc0\111\uffc0\001\002\000\012\003" +
    "\uffbd\012\uffbd\107\uffbd\111\uffbd\001\002\000\032\003\uffa9" +
    "\007\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\034\uffa9\001\002\000\030" +
    "\003\122\007\uffad\012\124\013\uffad\015\uffad\016\uffad\025" +
    "\077\026\071\034\uffad\107\102\111\061\001\002\000\014" +
    "\003\uffba\007\uffba\013\uffba\015\uffba\016\uffba\001\002\000" +
    "\012\003\125\012\124\107\102\111\061\001\002\000\020" +
    "\003\122\012\124\013\132\025\077\026\071\107\102\111" +
    "\061\001\002\000\006\003\127\013\130\001\002\000\032" +
    "\003\uffa7\007\uffa7\013\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\034\uffa7\001\002" +
    "\000\032\003\uffae\007\uffae\013\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\034\uffae" +
    "\001\002\000\004\013\121\001\002\000\032\003\uffa8\007" +
    "\uffa8\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\034\uffa8\001\002\000\014\003" +
    "\104\007\uffb5\013\uffb5\015\101\016\072\001\002\000\022" +
    "\003\127\013\130\017\112\020\113\021\117\022\114\023" +
    "\115\024\120\001\002\000\012\003\137\013\140\015\101" +
    "\016\072\001\002\000\046\003\076\012\066\013\132\014" +
    "\050\015\101\016\072\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\077\026\071\047\062\050\065\107" +
    "\067\111\061\001\002\000\030\003\076\007\uffb1\012\066" +
    "\013\uffb1\014\050\015\uffb1\016\uffb1\047\062\050\065\107" +
    "\067\111\061\001\002\000\014\003\uffb9\007\uffb9\013\uffb9" +
    "\015\uffb9\016\uffb9\001\002\000\022\003\127\013\130\017" +
    "\112\020\113\021\117\022\114\023\115\024\120\001\002" +
    "\000\012\003\137\013\140\015\101\016\072\001\002\000" +
    "\046\003\076\012\066\013\132\014\050\015\101\016\072" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\077\026\071\047\062\050\065\107\067\111\061\001\002" +
    "\000\004\013\145\001\002\000\010\003\uffd4\007\uffd4\013" +
    "\uffd4\001\002\000\006\107\102\111\061\001\002\000\012" +
    "\003\150\012\124\107\102\111\061\001\002\000\044\003" +
    "\122\007\uffad\012\124\013\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\077\026" +
    "\071\034\uffad\107\102\111\061\001\002\000\032\003\uffaf" +
    "\007\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\034\uffaf\001\002\000\032" +
    "\003\uffab\007\uffab\013\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\034\uffab\001\002" +
    "\000\022\003\047\012\045\014\050\047\037\050\043\107" +
    "\046\110\040\111\034\001\002\000\022\003\155\012\045" +
    "\014\050\047\037\050\043\107\046\110\040\111\034\001" +
    "\002\000\046\003\076\007\uffdf\012\066\014\050\015\101" +
    "\016\072\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\077\026\071\047\062\050\065\107\067\111\061" +
    "\001\002\000\006\003\uffe2\007\uffe2\001\002\000\006\003" +
    "\uffe0\007\uffe0\001\002\000\010\003\153\007\uffa4\011\154" +
    "\001\002\000\010\003\uffa2\007\167\011\031\001\002\000" +
    "\006\003\163\007\164\001\002\000\016\003\021\006\015" +
    "\027\023\030\020\031\013\107\017\001\002\000\016\003" +
    "\021\006\015\027\023\030\020\031\013\107\017\001\002" +
    "\000\006\003\ufff4\010\ufff4\001\002\000\006\003\uffee\010" +
    "\uffee\001\002\000\016\003\021\006\015\027\023\030\020" +
    "\031\013\107\017\001\002\000\006\003\uffef\010\uffef\001" +
    "\002\000\004\005\172\001\002\000\050\003\224\006\213" +
    "\027\023\030\020\031\013\032\217\037\240\040\210\043" +
    "\215\045\214\046\230\051\223\052\231\053\227\054\200" +
    "\055\212\077\221\100\207\107\017\001\002\000\050\003" +
    "\uff3f\006\uff3f\027\uff3f\030\uff3f\031\uff3f\032\uff3f\037\uff3f" +
    "\040\uff3f\043\uff3f\045\uff3f\046\uff3f\051\uff3f\052\uff3f\053" +
    "\uff3f\054\uff3f\055\uff3f\077\uff3f\100\uff3f\107\uff3f\001\002" +
    "\000\006\003\u0665\007\u0666\001\002\000\050\003\uff43\006" +
    "\uff43\027\uff43\030\uff43\031\uff43\032\uff43\037\uff43\040\uff43" +
    "\043\uff43\045\uff43\046\uff43\051\uff43\052\uff43\053\uff43\054" +
    "\uff43\055\uff43\077\uff43\100\uff43\107\uff43\001\002\000\050" +
    "\003\uff40\006\uff40\027\uff40\030\uff40\031\uff40\032\uff40\037" +
    "\uff40\040\uff40\043\uff40\045\uff40\046\uff40\051\uff40\052\uff40" +
    "\053\uff40\054\uff40\055\uff40\077\uff40\100\uff40\107\uff40\001" +
    "\002\000\050\003\uff22\006\uff22\027\uff22\030\uff22\031\uff22" +
    "\032\uff22\037\uff22\040\uff22\043\uff22\045\uff22\046\uff22\051" +
    "\uff22\052\uff22\053\uff22\054\uff22\055\uff22\077\uff22\100\uff22" +
    "\107\uff22\001\002\000\006\003\u064a\012\u064b\001\002\000" +
    "\050\003\ufebf\006\ufebf\027\ufebf\030\ufebf\031\ufebf\032\ufebf" +
    "\037\ufebf\040\ufebf\043\ufebf\045\ufebf\046\ufebf\051\ufebf\052" +
    "\ufebf\053\ufebf\054\ufebf\055\ufebf\077\ufebf\100\ufebf\107\ufebf" +
    "\001\002\000\050\003\uff44\006\uff44\027\uff44\030\uff44\031" +
    "\uff44\032\uff44\037\uff44\040\uff44\043\uff44\045\uff44\046\uff44" +
    "\051\uff44\052\uff44\053\uff44\054\uff44\055\uff44\077\uff44\100" +
    "\uff44\107\uff44\001\002\000\004\002\ufffd\001\002\000\050" +
    "\003\uff2e\006\uff2e\027\uff2e\030\uff2e\031\uff2e\032\uff2e\037" +
    "\uff2e\040\uff2e\043\uff2e\045\uff2e\046\uff2e\051\uff2e\052\uff2e" +
    "\053\uff2e\054\uff2e\055\uff2e\077\uff2e\100\uff2e\107\uff2e\001" +
    "\002\000\050\003\uff41\006\uff41\027\uff41\030\uff41\031\uff41" +
    "\032\uff41\037\uff41\040\uff41\043\uff41\045\uff41\046\uff41\051" +
    "\uff41\052\uff41\053\uff41\054\uff41\055\uff41\077\uff41\100\uff41" +
    "\107\uff41\001\002\000\006\003\u0645\107\160\001\002\000" +
    "\006\003\u0637\012\u0638\001\002\000\006\003\u0286\107\u0285" +
    "\001\002\000\050\003\uff2d\006\uff2d\027\uff2d\030\uff2d\031" +
    "\uff2d\032\uff2d\037\uff2d\040\uff2d\043\uff2d\045\uff2d\046\uff2d" +
    "\051\uff2d\052\uff2d\053\uff2d\054\uff2d\055\uff2d\077\uff2d\100" +
    "\uff2d\107\uff2d\001\002\000\006\003\u01f6\012\u01f7\001\002" +
    "\000\004\002\uff4c\001\002\000\006\003\u01e9\012\u01ea\001" +
    "\002\000\006\003\u01d2\012\u01d3\001\002\000\050\003\uff0f" +
    "\006\uff0f\027\uff0f\030\uff0f\031\uff0f\032\uff0f\037\uff0f\040" +
    "\uff0f\043\uff0f\045\uff0f\046\uff0f\051\uff0f\052\uff0f\053\uff0f" +
    "\054\uff0f\055\uff0f\077\uff0f\100\uff0f\107\uff0f\001\002\000" +
    "\006\003\u0177\107\u0176\001\002\000\050\003\uffa0\006\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\037\uffa0\040\uffa0\043" +
    "\uffa0\045\uffa0\046\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\077\uffa0\100\uffa0\107\uffa0\001\002\000\006\003" +
    "\u0154\107\u0153\001\002\000\050\003\uff10\006\uff10\027\uff10" +
    "\030\uff10\031\uff10\032\uff10\037\uff10\040\uff10\043\uff10\045" +
    "\uff10\046\uff10\051\uff10\052\uff10\053\uff10\054\uff10\055\uff10" +
    "\077\uff10\100\uff10\107\uff10\001\002\000\006\003\u0144\012" +
    "\u0145\001\002\000\056\002\uff4a\003\uffdb\006\u012a\007\u012b" +
    "\011\031\027\uff9d\030\uff9d\031\uff9d\032\uff9d\037\uff9d\040" +
    "\uff9d\043\uff9d\045\uff9d\046\uff9d\051\uff9d\052\uff9d\053\uff9d" +
    "\054\uff9d\055\uff9d\077\uff9d\100\uff9d\107\u0129\001\002\000" +
    "\050\003\uffa1\006\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\037\uffa1\040\uffa1\043\uffa1\045\uffa1\046\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\077\uffa1\100\uffa1\107\uffa1" +
    "\001\002\000\050\003\ufebe\006\ufebe\027\ufebe\030\ufebe\031" +
    "\ufebe\032\ufebe\037\ufebe\040\ufebe\043\ufebe\045\ufebe\046\ufebe" +
    "\051\ufebe\052\ufebe\053\ufebe\054\ufebe\055\ufebe\077\ufebe\100" +
    "\ufebe\107\ufebe\001\002\000\006\003\u011b\012\u011c\001\002" +
    "\000\006\003\u010d\012\u010e\001\002\000\006\003\377\012" +
    "\u0100\001\002\000\050\003\uff20\006\uff20\027\uff20\030\uff20" +
    "\031\uff20\032\uff20\037\uff20\040\uff20\043\uff20\045\uff20\046" +
    "\uff20\051\uff20\052\uff20\053\uff20\054\uff20\055\uff20\077\uff20" +
    "\100\uff20\107\uff20\001\002\000\006\003\375\007\376\001" +
    "\002\000\050\003\224\006\213\027\023\030\020\031\013" +
    "\032\217\037\240\040\210\043\215\045\214\046\230\051" +
    "\223\052\231\053\227\054\200\055\212\077\221\100\207" +
    "\107\017\001\002\000\050\003\uff21\006\uff21\027\uff21\030" +
    "\uff21\031\uff21\032\uff21\037\uff21\040\uff21\043\uff21\045\uff21" +
    "\046\uff21\051\uff21\052\uff21\053\uff21\054\uff21\055\uff21\077" +
    "\uff21\100\uff21\107\uff21\001\002\000\050\003\uff9e\006\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\032\uff9e\037\uff9e\040\uff9e\043" +
    "\uff9e\045\uff9e\046\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\077\uff9e\100\uff9e\107\uff9e\001\002\000\050\003" +
    "\uff42\006\uff42\027\uff42\030\uff42\031\uff42\032\uff42\037\uff42" +
    "\040\uff42\043\uff42\045\uff42\046\uff42\051\uff42\052\uff42\053" +
    "\uff42\054\uff42\055\uff42\077\uff42\100\uff42\107\uff42\001\002" +
    "\000\006\003\243\107\242\001\002\000\050\003\uff9f\006" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\037\uff9f\040\uff9f" +
    "\043\uff9f\045\uff9f\046\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\055\uff9f\077\uff9f\100\uff9f\107\uff9f\001\002\000\006" +
    "\003\257\011\260\001\002\000\004\011\244\001\002\000" +
    "\004\033\245\001\002\000\004\037\246\001\002\000\004" +
    "\012\247\001\002\000\004\107\250\001\002\000\004\034" +
    "\251\001\002\000\010\003\056\107\055\110\040\001\002" +
    "\000\004\034\253\001\002\000\010\003\056\107\055\110" +
    "\040\001\002\000\004\013\255\001\002\000\004\007\256" +
    "\001\002\000\050\003\uff9a\006\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\037\uff9a\040\uff9a\043\uff9a\045\uff9a\046\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\077\uff9a\100" +
    "\uff9a\107\uff9a\001\002\000\004\033\362\001\002\000\006" +
    "\003\262\033\261\001\002\000\006\003\275\037\274\001" +
    "\002\000\004\037\263\001\002\000\004\012\264\001\002" +
    "\000\004\107\265\001\002\000\004\034\266\001\002\000" +
    "\010\003\056\107\055\110\040\001\002\000\004\034\270" +
    "\001\002\000\010\003\056\107\055\110\040\001\002\000" +
    "\004\013\272\001\002\000\004\007\273\001\002\000\050" +
    "\003\uff98\006\uff98\027\uff98\030\uff98\031\uff98\032\uff98\037" +
    "\uff98\040\uff98\043\uff98\045\uff98\046\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\077\uff98\100\uff98\107\uff98\001" +
    "\002\000\006\003\306\012\307\001\002\000\004\012\276" +
    "\001\002\000\004\107\277\001\002\000\004\034\300\001" +
    "\002\000\010\003\056\107\055\110\040\001\002\000\004" +
    "\034\302\001\002\000\010\003\056\107\055\110\040\001" +
    "\002\000\004\013\304\001\002\000\004\007\305\001\002" +
    "\000\050\003\uff97\006\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\037\uff97\040\uff97\043\uff97\045\uff97\046\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\077\uff97\100\uff97\107" +
    "\uff97\001\002\000\004\107\353\001\002\000\006\003\311" +
    "\107\310\001\002\000\006\003\320\034\321\001\002\000" +
    "\004\034\312\001\002\000\010\003\056\107\055\110\040" +
    "\001\002\000\004\034\314\001\002\000\010\003\056\107" +
    "\055\110\040\001\002\000\004\013\316\001\002\000\004" +
    "\007\317\001\002\000\050\003\uff95\006\uff95\027\uff95\030" +
    "\uff95\031\uff95\032\uff95\037\uff95\040\uff95\043\uff95\045\uff95" +
    "\046\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\077" +
    "\uff95\100\uff95\107\uff95\001\002\000\010\003\056\107\055" +
    "\110\040\001\002\000\010\003\322\107\055\110\040\001" +
    "\002\000\010\003\uffcf\025\uffcb\034\342\001\002\000\006" +
    "\003\324\034\325\001\002\000\010\003\056\107\055\110" +
    "\040\001\002\000\010\003\327\107\055\110\040\001\002" +
    "\000\006\003\332\013\333\001\002\000\010\003\uffcf\013" +
    "\330\025\uffcb\001\002\000\004\007\331\001\002\000\050" +
    "\003\uff91\006\uff91\027\uff91\030\uff91\031\uff91\032\uff91\037" +
    "\uff91\040\uff91\043\uff91\045\uff91\046\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\055\uff91\077\uff91\100\uff91\107\uff91\001" +
    "\002\000\004\007\336\001\002\000\006\003\334\007\335" +
    "\001\002\000\050\003\uff8f\006\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\037\uff8f\040\uff8f\043\uff8f\045\uff8f\046\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\077\uff8f\100" +
    "\uff8f\107\uff8f\001\002\000\050\003\uff9c\006\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\037\uff9c\040\uff9c\043\uff9c\045" +
    "\uff9c\046\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\077\uff9c\100\uff9c\107\uff9c\001\002\000\050\003\uff90\006" +
    "\uff90\027\uff90\030\uff90\031\uff90\032\uff90\037\uff90\040\uff90" +
    "\043\uff90\045\uff90\046\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\055\uff90\077\uff90\100\uff90\107\uff90\001\002\000\004" +
    "\013\340\001\002\000\004\007\341\001\002\000\050\003" +
    "\uff92\006\uff92\027\uff92\030\uff92\031\uff92\032\uff92\037\uff92" +
    "\040\uff92\043\uff92\045\uff92\046\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\055\uff92\077\uff92\100\uff92\107\uff92\001\002" +
    "\000\010\003\056\107\055\110\040\001\002\000\004\013" +
    "\344\001\002\000\004\007\345\001\002\000\050\003\uff93" +
    "\006\uff93\027\uff93\030\uff93\031\uff93\032\uff93\037\uff93\040" +
    "\uff93\043\uff93\045\uff93\046\uff93\051\uff93\052\uff93\053\uff93" +
    "\054\uff93\055\uff93\077\uff93\100\uff93\107\uff93\001\002\000" +
    "\004\034\347\001\002\000\010\003\056\107\055\110\040" +
    "\001\002\000\004\013\351\001\002\000\004\007\352\001" +
    "\002\000\050\003\uff94\006\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\037\uff94\040\uff94\043\uff94\045\uff94\046\uff94\051" +
    "\uff94\052\uff94\053\uff94\054\uff94\055\uff94\077\uff94\100\uff94" +
    "\107\uff94\001\002\000\004\034\354\001\002\000\010\003" +
    "\056\107\055\110\040\001\002\000\004\034\356\001\002" +
    "\000\010\003\056\107\055\110\040\001\002\000\004\013" +
    "\360\001\002\000\004\007\361\001\002\000\050\003\uff96" +
    "\006\uff96\027\uff96\030\uff96\031\uff96\032\uff96\037\uff96\040" +
    "\uff96\043\uff96\045\uff96\046\uff96\051\uff96\052\uff96\053\uff96" +
    "\054\uff96\055\uff96\077\uff96\100\uff96\107\uff96\001\002\000" +
    "\004\037\363\001\002\000\004\012\364\001\002\000\004" +
    "\107\365\001\002\000\004\034\366\001\002\000\010\003" +
    "\056\107\055\110\040\001\002\000\004\034\370\001\002" +
    "\000\010\003\056\107\055\110\040\001\002\000\004\013" +
    "\372\001\002\000\004\007\373\001\002\000\050\003\uff99" +
    "\006\uff99\027\uff99\030\uff99\031\uff99\032\uff99\037\uff99\040" +
    "\uff99\043\uff99\045\uff99\046\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\077\uff99\100\uff99\107\uff99\001\002\000" +
    "\004\002\uff4b\001\002\000\050\003\uffe7\006\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\037\uffe7\040\uffe7\043\uffe7\045" +
    "\uffe7\046\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7" +
    "\077\uffe7\100\uffe7\107\uffe7\001\002\000\050\003\uffeb\006" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\037\uffeb\040\uffeb" +
    "\043\uffeb\045\uffeb\046\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\077\uffeb\100\uffeb\107\uffeb\001\002\000\004" +
    "\107\u010a\001\002\000\006\003\u0102\107\u0101\001\002\000" +
    "\006\003\u0105\013\u0106\001\002\000\004\013\u0103\001\002" +
    "\000\004\007\u0104\001\002\000\050\003\uff18\006\uff18\027" +
    "\uff18\030\uff18\031\uff18\032\uff18\037\uff18\040\uff18\043\uff18" +
    "\045\uff18\046\uff18\051\uff18\052\uff18\053\uff18\054\uff18\055" +
    "\uff18\077\uff18\100\uff18\107\uff18\001\002\000\004\007\u0109" +
    "\001\002\000\006\003\u0107\007\u0108\001\002\000\050\003" +
    "\uff16\006\uff16\027\uff16\030\uff16\031\uff16\032\uff16\037\uff16" +
    "\040\uff16\043\uff16\045\uff16\046\uff16\051\uff16\052\uff16\053" +
    "\uff16\054\uff16\055\uff16\077\uff16\100\uff16\107\uff16\001\002" +
    "\000\050\003\uff1a\006\uff1a\027\uff1a\030\uff1a\031\uff1a\032" +
    "\uff1a\037\uff1a\040\uff1a\043\uff1a\045\uff1a\046\uff1a\051\uff1a" +
    "\052\uff1a\053\uff1a\054\uff1a\055\uff1a\077\uff1a\100\uff1a\107" +
    "\uff1a\001\002\000\050\003\uff17\006\uff17\027\uff17\030\uff17" +
    "\031\uff17\032\uff17\037\uff17\040\uff17\043\uff17\045\uff17\046" +
    "\uff17\051\uff17\052\uff17\053\uff17\054\uff17\055\uff17\077\uff17" +
    "\100\uff17\107\uff17\001\002\000\004\013\u010b\001\002\000" +
    "\004\007\u010c\001\002\000\050\003\uff19\006\uff19\027\uff19" +
    "\030\uff19\031\uff19\032\uff19\037\uff19\040\uff19\043\uff19\045" +
    "\uff19\046\uff19\051\uff19\052\uff19\053\uff19\054\uff19\055\uff19" +
    "\077\uff19\100\uff19\107\uff19\001\002\000\004\107\u0118\001" +
    "\002\000\006\003\u0110\107\u010f\001\002\000\006\003\u0113" +
    "\013\u0114\001\002\000\004\013\u0111\001\002\000\004\007" +
    "\u0112\001\002\000\050\003\uff2a\006\uff2a\027\uff2a\030\uff2a" +
    "\031\uff2a\032\uff2a\037\uff2a\040\uff2a\043\uff2a\045\uff2a\046" +
    "\uff2a\051\uff2a\052\uff2a\053\uff2a\054\uff2a\055\uff2a\077\uff2a" +
    "\100\uff2a\107\uff2a\001\002\000\004\007\u0117\001\002\000" +
    "\006\003\u0115\007\u0116\001\002\000\050\003\uff28\006\uff28" +
    "\027\uff28\030\uff28\031\uff28\032\uff28\037\uff28\040\uff28\043" +
    "\uff28\045\uff28\046\uff28\051\uff28\052\uff28\053\uff28\054\uff28" +
    "\055\uff28\077\uff28\100\uff28\107\uff28\001\002\000\050\003" +
    "\uff2c\006\uff2c\027\uff2c\030\uff2c\031\uff2c\032\uff2c\037\uff2c" +
    "\040\uff2c\043\uff2c\045\uff2c\046\uff2c\051\uff2c\052\uff2c\053" +
    "\uff2c\054\uff2c\055\uff2c\077\uff2c\100\uff2c\107\uff2c\001\002" +
    "\000\050\003\uff29\006\uff29\027\uff29\030\uff29\031\uff29\032" +
    "\uff29\037\uff29\040\uff29\043\uff29\045\uff29\046\uff29\051\uff29" +
    "\052\uff29\053\uff29\054\uff29\055\uff29\077\uff29\100\uff29\107" +
    "\uff29\001\002\000\004\013\u0119\001\002\000\004\007\u011a" +
    "\001\002\000\050\003\uff2b\006\uff2b\027\uff2b\030\uff2b\031" +
    "\uff2b\032\uff2b\037\uff2b\040\uff2b\043\uff2b\045\uff2b\046\uff2b" +
    "\051\uff2b\052\uff2b\053\uff2b\054\uff2b\055\uff2b\077\uff2b\100" +
    "\uff2b\107\uff2b\001\002\000\004\107\u0126\001\002\000\006" +
    "\003\u011e\107\u011d\001\002\000\006\003\u0121\013\u0122\001" +
    "\002\000\004\013\u011f\001\002\000\004\007\u0120\001\002" +
    "\000\050\003\uff13\006\uff13\027\uff13\030\uff13\031\uff13\032" +
    "\uff13\037\uff13\040\uff13\043\uff13\045\uff13\046\uff13\051\uff13" +
    "\052\uff13\053\uff13\054\uff13\055\uff13\077\uff13\100\uff13\107" +
    "\uff13\001\002\000\004\007\u0125\001\002\000\006\003\u0123" +
    "\007\u0124\001\002\000\050\003\uff11\006\uff11\027\uff11\030" +
    "\uff11\031\uff11\032\uff11\037\uff11\040\uff11\043\uff11\045\uff11" +
    "\046\uff11\051\uff11\052\uff11\053\uff11\054\uff11\055\uff11\077" +
    "\uff11\100\uff11\107\uff11\001\002\000\050\003\uff15\006\uff15" +
    "\027\uff15\030\uff15\031\uff15\032\uff15\037\uff15\040\uff15\043" +
    "\uff15\045\uff15\046\uff15\051\uff15\052\uff15\053\uff15\054\uff15" +
    "\055\uff15\077\uff15\100\uff15\107\uff15\001\002\000\050\003" +
    "\uff12\006\uff12\027\uff12\030\uff12\031\uff12\032\uff12\037\uff12" +
    "\040\uff12\043\uff12\045\uff12\046\uff12\051\uff12\052\uff12\053" +
    "\uff12\054\uff12\055\uff12\077\uff12\100\uff12\107\uff12\001\002" +
    "\000\004\013\u0127\001\002\000\004\007\u0128\001\002\000" +
    "\050\003\uff14\006\uff14\027\uff14\030\uff14\031\uff14\032\uff14" +
    "\037\uff14\040\uff14\043\uff14\045\uff14\046\uff14\051\uff14\052" +
    "\uff14\053\uff14\054\uff14\055\uff14\077\uff14\100\uff14\107\uff14" +
    "\001\002\000\010\003\uffa3\007\uffa3\011\u012c\001\002\000" +
    "\004\002\uff49\001\002\000\050\003\uffe8\006\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\037\uffe8\040\uffe8\043\uffe8\045" +
    "\uffe8\046\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\077\uffe8\100\uffe8\107\uffe8\001\002\000\004\033\u012d\001" +
    "\002\000\006\037\u012e\041\u012f\001\002\000\004\012\u013c" +
    "\001\002\000\010\003\u0131\107\055\110\040\001\002\000" +
    "\004\042\u013a\001\002\000\012\003\uffcf\025\uffcb\034\u0137" +
    "\042\uffcf\001\002\000\010\003\u0133\034\u0134\042\uff85\001" +
    "\002\000\010\003\u0131\107\055\110\040\001\002\000\010" +
    "\003\u0136\107\055\110\040\001\002\000\006\003\uff84\042" +
    "\uff84\001\002\000\012\003\uffcf\025\uffcb\034\u0137\042\uffcf" +
    "\001\002\000\010\003\u0131\107\055\110\040\001\002\000" +
    "\006\003\uff82\042\uff82\001\002\000\006\003\uff81\042\uff81" +
    "\001\002\000\004\007\u013b\001\002\000\050\003\uff8d\006" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\037\uff8d\040\uff8d" +
    "\043\uff8d\045\uff8d\046\uff8d\051\uff8d\052\uff8d\053\uff8d\054" +
    "\uff8d\055\uff8d\077\uff8d\100\uff8d\107\uff8d\001\002\000\004" +
    "\107\u013d\001\002\000\004\034\u013e\001\002\000\010\003" +
    "\056\107\055\110\040\001\002\000\004\034\u0140\001\002" +
    "\000\010\003\056\107\055\110\040\001\002\000\004\013" +
    "\u0142\001\002\000\004\007\u0143\001\002\000\050\003\uff9b" +
    "\006\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\037\uff9b\040" +
    "\uff9b\043\uff9b\045\uff9b\046\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\077\uff9b\100\uff9b\107\uff9b\001\002\000" +
    "\004\107\u0150\001\002\000\006\003\u0147\107\u0146\001\002" +
    "\000\006\003\u014a\013\u014b\001\002\000\004\013\u0148\001" +
    "\002\000\004\007\u0149\001\002\000\050\003\uff25\006\uff25" +
    "\027\uff25\030\uff25\031\uff25\032\uff25\037\uff25\040\uff25\043" +
    "\uff25\045\uff25\046\uff25\051\uff25\052\uff25\053\uff25\054\uff25" +
    "\055\uff25\077\uff25\100\uff25\107\uff25\001\002\000\004\007" +
    "\u014f\001\002\000\006\003\u014c\007\u014d\001\002\000\004" +
    "\007\u014e\001\002\000\050\003\uff27\006\uff27\027\uff27\030" +
    "\uff27\031\uff27\032\uff27\037\uff27\040\uff27\043\uff27\045\uff27" +
    "\046\uff27\051\uff27\052\uff27\053\uff27\054\uff27\055\uff27\077" +
    "\uff27\100\uff27\107\uff27\001\002\000\050\003\uff23\006\uff23" +
    "\027\uff23\030\uff23\031\uff23\032\uff23\037\uff23\040\uff23\043" +
    "\uff23\045\uff23\046\uff23\051\uff23\052\uff23\053\uff23\054\uff23" +
    "\055\uff23\077\uff23\100\uff23\107\uff23\001\002\000\050\003" +
    "\uff24\006\uff24\027\uff24\030\uff24\031\uff24\032\uff24\037\uff24" +
    "\040\uff24\043\uff24\045\uff24\046\uff24\051\uff24\052\uff24\053" +
    "\uff24\054\uff24\055\uff24\077\uff24\100\uff24\107\uff24\001\002" +
    "\000\004\013\u0151\001\002\000\004\007\u0152\001\002\000" +
    "\050\003\uff26\006\uff26\027\uff26\030\uff26\031\uff26\032\uff26" +
    "\037\uff26\040\uff26\043\uff26\045\uff26\046\uff26\051\uff26\052" +
    "\uff26\053\uff26\054\uff26\055\uff26\077\uff26\100\uff26\107\uff26" +
    "\001\002\000\006\003\u015b\011\u015c\001\002\000\004\011" +
    "\u0155\001\002\000\004\033\u0156\001\002\000\004\041\u0157" +
    "\001\002\000\010\003\u0131\107\055\110\040\001\002\000" +
    "\004\042\u0159\001\002\000\004\007\u015a\001\002\000\050" +
    "\003\uff8c\006\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\037" +
    "\uff8c\040\uff8c\043\uff8c\045\uff8c\046\uff8c\051\uff8c\052\uff8c" +
    "\053\uff8c\054\uff8c\055\uff8c\077\uff8c\100\uff8c\107\uff8c\001" +
    "\002\000\004\033\u0171\001\002\000\006\003\u015e\033\u015d" +
    "\001\002\000\006\003\u0163\041\u0164\001\002\000\004\041" +
    "\u015f\001\002\000\010\003\u0131\107\055\110\040\001\002" +
    "\000\004\042\u0161\001\002\000\004\007\u0162\001\002\000" +
    "\050\003\uff8a\006\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a" +
    "\037\uff8a\040\uff8a\043\uff8a\045\uff8a\046\uff8a\051\uff8a\052" +
    "\uff8a\053\uff8a\054\uff8a\055\uff8a\077\uff8a\100\uff8a\107\uff8a" +
    "\001\002\000\010\003\u0131\107\055\110\040\001\002\000" +
    "\010\003\u0166\107\055\110\040\001\002\000\006\003\u0169" +
    "\042\u016a\001\002\000\012\003\uffcf\025\uffcb\034\u0137\042" +
    "\u0167\001\002\000\004\007\u0168\001\002\000\050\003\uff88" +
    "\006\uff88\027\uff88\030\uff88\031\uff88\032\uff88\037\uff88\040" +
    "\uff88\043\uff88\045\uff88\046\uff88\051\uff88\052\uff88\053\uff88" +
    "\054\uff88\055\uff88\077\uff88\100\uff88\107\uff88\001\002\000" +
    "\004\007\u016d\001\002\000\006\003\u016b\007\u016c\001\002" +
    "\000\050\003\uff86\006\uff86\027\uff86\030\uff86\031\uff86\032" +
    "\uff86\037\uff86\040\uff86\043\uff86\045\uff86\046\uff86\051\uff86" +
    "\052\uff86\053\uff86\054\uff86\055\uff86\077\uff86\100\uff86\107" +
    "\uff86\001\002\000\050\003\uff8e\006\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\037\uff8e\040\uff8e\043\uff8e\045\uff8e\046" +
    "\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\077\uff8e" +
    "\100\uff8e\107\uff8e\001\002\000\050\003\uff87\006\uff87\027" +
    "\uff87\030\uff87\031\uff87\032\uff87\037\uff87\040\uff87\043\uff87" +
    "\045\uff87\046\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055" +
    "\uff87\077\uff87\100\uff87\107\uff87\001\002\000\004\042\u016f" +
    "\001\002\000\004\007\u0170\001\002\000\050\003\uff89\006" +
    "\uff89\027\uff89\030\uff89\031\uff89\032\uff89\037\uff89\040\uff89" +
    "\043\uff89\045\uff89\046\uff89\051\uff89\052\uff89\053\uff89\054" +
    "\uff89\055\uff89\077\uff89\100\uff89\107\uff89\001\002\000\004" +
    "\041\u0172\001\002\000\010\003\u0131\107\055\110\040\001" +
    "\002\000\004\042\u0174\001\002\000\004\007\u0175\001\002" +
    "\000\050\003\uff8b\006\uff8b\027\uff8b\030\uff8b\031\uff8b\032" +
    "\uff8b\037\uff8b\040\uff8b\043\uff8b\045\uff8b\046\uff8b\051\uff8b" +
    "\052\uff8b\053\uff8b\054\uff8b\055\uff8b\077\uff8b\100\uff8b\107" +
    "\uff8b\001\002\000\006\003\u0185\011\u0186\001\002\000\004" +
    "\011\u0178\001\002\000\004\033\u0179\001\002\000\004\032" +
    "\u017a\001\002\000\004\012\u017b\001\002\000\004\107\u017c" +
    "\001\002\000\004\034\u017d\001\002\000\006\035\u017f\036" +
    "\u017e\001\002\000\006\003\uff2f\034\uff2f\001\002\000\006" +
    "\003\uff30\034\uff30\001\002\000\004\034\u0181\001\002\000" +
    "\004\107\u0182\001\002\000\004\013\u0183\001\002\000\004" +
    "\007\u0184\001\002\000\050\003\uff3c\006\uff3c\027\uff3c\030" +
    "\uff3c\031\uff3c\032\uff3c\037\uff3c\040\uff3c\043\uff3c\045\uff3c" +
    "\046\uff3c\051\uff3c\052\uff3c\053\uff3c\054\uff3c\055\uff3c\077" +
    "\uff3c\100\uff3c\107\uff3c\001\002\000\004\033\u01c8\001\002" +
    "\000\006\003\u0188\033\u0187\001\002\000\006\003\u0192\032" +
    "\u0193\001\002\000\004\032\u0189\001\002\000\004\012\u018a" +
    "\001\002\000\004\107\u018b\001\002\000\004\034\u018c\001" +
    "\002\000\006\035\u017f\036\u017e\001\002\000\004\034\u018e" +
    "\001\002\000\004\107\u018f\001\002\000\004\013\u0190\001" +
    "\002\000\004\007\u0191\001\002\000\050\003\uff3a\006\uff3a" +
    "\027\uff3a\030\uff3a\031\uff3a\032\uff3a\037\uff3a\040\uff3a\043" +
    "\uff3a\045\uff3a\046\uff3a\051\uff3a\052\uff3a\053\uff3a\054\uff3a" +
    "\055\uff3a\077\uff3a\100\uff3a\107\uff3a\001\002\000\004\012" +
    "\u01c0\001\002\000\006\003\u0194\012\u0195\001\002\000\004" +
    "\107\u01b9\001\002\000\006\003\u0197\107\u0196\001\002\000" +
    "\006\003\u019e\034\u019f\001\002\000\004\034\u0198\001\002" +
    "\000\006\035\u017f\036\u017e\001\002\000\004\034\u019a\001" +
    "\002\000\004\107\u019b\001\002\000\004\013\u019c\001\002" +
    "\000\004\007\u019d\001\002\000\050\003\uff37\006\uff37\027" +
    "\uff37\030\uff37\031\uff37\032\uff37\037\uff37\040\uff37\043\uff37" +
    "\045\uff37\046\uff37\051\uff37\052\uff37\053\uff37\054\uff37\055" +
    "\uff37\077\uff37\100\uff37\107\uff37\001\002\000\006\035\u017f" +
    "\036\u017e\001\002\000\010\003\u01a0\035\u017f\036\u017e\001" +
    "\002\000\004\034\u01b0\001\002\000\006\003\u01a2\034\u01a3" +
    "\001\002\000\004\107\u01ad\001\002\000\006\003\u01a5\107" +
    "\u01a4\001\002\000\006\003\u01a8\013\u01a9\001\002\000\004" +
    "\013\u01a6\001\002\000\004\007\u01a7\001\002\000\050\003" +
    "\uff33\006\uff33\027\uff33\030\uff33\031\uff33\032\uff33\037\uff33" +
    "\040\uff33\043\uff33\045\uff33\046\uff33\051\uff33\052\uff33\053" +
    "\uff33\054\uff33\055\uff33\077\uff33\100\uff33\107\uff33\001\002" +
    "\000\004\007\u01ac\001\002\000\006\003\u01aa\007\u01ab\001" +
    "\002\000\050\003\uff31\006\uff31\027\uff31\030\uff31\031\uff31" +
    "\032\uff31\037\uff31\040\uff31\043\uff31\045\uff31\046\uff31\051" +
    "\uff31\052\uff31\053\uff31\054\uff31\055\uff31\077\uff31\100\uff31" +
    "\107\uff31\001\002\000\050\003\uff3d\006\uff3d\027\uff3d\030" +
    "\uff3d\031\uff3d\032\uff3d\037\uff3d\040\uff3d\043\uff3d\045\uff3d" +
    "\046\uff3d\051\uff3d\052\uff3d\053\uff3d\054\uff3d\055\uff3d\077" +
    "\uff3d\100\uff3d\107\uff3d\001\002\000\050\003\uff32\006\uff32" +
    "\027\uff32\030\uff32\031\uff32\032\uff32\037\uff32\040\uff32\043" +
    "\uff32\045\uff32\046\uff32\051\uff32\052\uff32\053\uff32\054\uff32" +
    "\055\uff32\077\uff32\100\uff32\107\uff32\001\002\000\004\013" +
    "\u01ae\001\002\000\004\007\u01af\001\002\000\050\003\uff34" +
    "\006\uff34\027\uff34\030\uff34\031\uff34\032\uff34\037\uff34\040" +
    "\uff34\043\uff34\045\uff34\046\uff34\051\uff34\052\uff34\053\uff34" +
    "\054\uff34\055\uff34\077\uff34\100\uff34\107\uff34\001\002\000" +
    "\004\107\u01b1\001\002\000\004\013\u01b2\001\002\000\004" +
    "\007\u01b3\001\002\000\050\003\uff35\006\uff35\027\uff35\030" +
    "\uff35\031\uff35\032\uff35\037\uff35\040\uff35\043\uff35\045\uff35" +
    "\046\uff35\051\uff35\052\uff35\053\uff35\054\uff35\055\uff35\077" +
    "\uff35\100\uff35\107\uff35\001\002\000\004\034\u01b5\001\002" +
    "\000\004\107\u01b6\001\002\000\004\013\u01b7\001\002\000" +
    "\004\007\u01b8\001\002\000\050\003\uff36\006\uff36\027\uff36" +
    "\030\uff36\031\uff36\032\uff36\037\uff36\040\uff36\043\uff36\045" +
    "\uff36\046\uff36\051\uff36\052\uff36\053\uff36\054\uff36\055\uff36" +
    "\077\uff36\100\uff36\107\uff36\001\002\000\004\034\u01ba\001" +
    "\002\000\006\035\u017f\036\u017e\001\002\000\004\034\u01bc" +
    "\001\002\000\004\107\u01bd\001\002\000\004\013\u01be\001" +
    "\002\000\004\007\u01bf\001\002\000\050\003\uff38\006\uff38" +
    "\027\uff38\030\uff38\031\uff38\032\uff38\037\uff38\040\uff38\043" +
    "\uff38\045\uff38\046\uff38\051\uff38\052\uff38\053\uff38\054\uff38" +
    "\055\uff38\077\uff38\100\uff38\107\uff38\001\002\000\004\107" +
    "\u01c1\001\002\000\004\034\u01c2\001\002\000\006\035\u017f" +
    "\036\u017e\001\002\000\004\034\u01c4\001\002\000\004\107" +
    "\u01c5\001\002\000\004\013\u01c6\001\002\000\004\007\u01c7" +
    "\001\002\000\050\003\uff39\006\uff39\027\uff39\030\uff39\031" +
    "\uff39\032\uff39\037\uff39\040\uff39\043\uff39\045\uff39\046\uff39" +
    "\051\uff39\052\uff39\053\uff39\054\uff39\055\uff39\077\uff39\100" +
    "\uff39\107\uff39\001\002\000\004\032\u01c9\001\002\000\004" +
    "\012\u01ca\001\002\000\004\107\u01cb\001\002\000\004\034" +
    "\u01cc\001\002\000\006\035\u017f\036\u017e\001\002\000\004" +
    "\034\u01ce\001\002\000\004\107\u01cf\001\002\000\004\013" +
    "\u01d0\001\002\000\004\007\u01d1\001\002\000\050\003\uff3b" +
    "\006\uff3b\027\uff3b\030\uff3b\031\uff3b\032\uff3b\037\uff3b\040" +
    "\uff3b\043\uff3b\045\uff3b\046\uff3b\051\uff3b\052\uff3b\053\uff3b" +
    "\054\uff3b\055\uff3b\077\uff3b\100\uff3b\107\uff3b\001\002\000" +
    "\020\003\076\012\066\014\050\047\062\050\065\107\067" +
    "\111\061\001\002\000\020\003\076\012\066\014\050\047" +
    "\062\050\065\107\067\111\061\001\002\000\012\003\u01d5" +
    "\013\u01d6\015\101\016\072\001\002\000\022\003\076\005" +
    "\u01e3\012\066\014\050\047\062\050\065\107\067\111\061" +
    "\001\002\000\006\003\u01d8\005\u01d7\001\002\000\050\003" +
    "\u01da\006\u01d9\027\023\030\020\031\013\032\217\037\240" +
    "\040\210\043\215\045\214\046\230\051\223\052\231\053" +
    "\227\054\200\055\212\077\221\100\207\107\017\001\002" +
    "\000\050\003\u01da\006\u01d9\027\023\030\020\031\013\032" +
    "\217\037\240\040\210\043\215\045\214\046\230\051\223" +
    "\052\231\053\227\054\200\055\212\077\221\100\207\107" +
    "\017\001\002\000\052\003\uff48\006\uff48\027\uff48\030\uff48" +
    "\031\uff48\032\uff48\037\uff48\040\uff48\043\uff48\044\uff48\045" +
    "\uff48\046\uff48\051\uff48\052\uff48\053\uff48\054\uff48\055\uff48" +
    "\077\uff48\100\uff48\107\uff48\001\002\000\054\003\uffdb\006" +
    "\uff9d\007\u012b\011\031\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\037\uff9d\040\uff9d\043\uff9d\045\uff9d\046\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\077\uff9d\100\uff9d\107\u0129" +
    "\001\002\000\050\003\ufeb9\006\ufeb9\027\ufeb9\030\ufeb9\031" +
    "\ufeb9\032\ufeb9\037\ufeb9\040\ufeb9\043\ufeb9\045\ufeb9\046\ufeb9" +
    "\051\ufeb9\052\ufeb9\053\ufeb9\054\ufeb9\055\ufeb9\077\ufeb9\100" +
    "\ufeb9\107\ufeb9\001\002\000\050\003\u01da\006\u01d9\027\023" +
    "\030\020\031\013\032\217\037\240\040\210\043\215\045" +
    "\214\046\230\051\223\052\231\053\227\054\200\055\212" +
    "\077\221\100\207\107\017\001\002\000\052\003\uff47\006" +
    "\uff47\027\uff47\030\uff47\031\uff47\032\uff47\037\uff47\040\uff47" +
    "\043\uff47\044\uff47\045\uff47\046\uff47\051\uff47\052\uff47\053" +
    "\uff47\054\uff47\055\uff47\077\uff47\100\uff47\107\uff47\001\002" +
    "\000\052\003\ufebd\006\ufebd\027\ufebd\030\ufebd\031\ufebd\032" +
    "\ufebd\037\ufebd\040\ufebd\043\ufebd\044\u01e0\045\ufebd\046\ufebd" +
    "\051\ufebd\052\ufebd\053\ufebd\054\ufebd\055\ufebd\077\ufebd\100" +
    "\ufebd\107\ufebd\001\002\000\050\003\ufeb8\006\ufeb8\027\ufeb8" +
    "\030\ufeb8\031\ufeb8\032\ufeb8\037\ufeb8\040\ufeb8\043\ufeb8\045" +
    "\ufeb8\046\ufeb8\051\ufeb8\052\ufeb8\053\ufeb8\054\ufeb8\055\ufeb8" +
    "\077\ufeb8\100\ufeb8\107\ufeb8\001\002\000\004\005\u01e1\001" +
    "\002\000\050\003\u01da\006\u01d9\027\023\030\020\031\013" +
    "\032\217\037\240\040\210\043\215\045\214\046\230\051" +
    "\223\052\231\053\227\054\200\055\212\077\221\100\207" +
    "\107\017\001\002\000\050\003\ufebc\006\ufebc\027\ufebc\030" +
    "\ufebc\031\ufebc\032\ufebc\037\ufebc\040\ufebc\043\ufebc\045\ufebc" +
    "\046\ufebc\051\ufebc\052\ufebc\053\ufebc\054\ufebc\055\ufebc\077" +
    "\ufebc\100\ufebc\107\ufebc\001\002\000\050\003\u01da\006\u01d9" +
    "\027\023\030\020\031\013\032\217\037\240\040\210\043" +
    "\215\045\214\046\230\051\223\052\231\053\227\054\200" +
    "\055\212\077\221\100\207\107\017\001\002\000\050\003" +
    "\ufeba\006\ufeba\027\ufeba\030\ufeba\031\ufeba\032\ufeba\037\ufeba" +
    "\040\ufeba\043\ufeba\045\ufeba\046\ufeba\051\ufeba\052\ufeba\053" +
    "\ufeba\054\ufeba\055\ufeba\077\ufeba\100\ufeba\107\ufeba\001\002" +
    "\000\012\003\104\013\u01e6\015\101\016\072\001\002\000" +
    "\004\005\u01e7\001\002\000\050\003\u01da\006\u01d9\027\023" +
    "\030\020\031\013\032\217\037\240\040\210\043\215\045" +
    "\214\046\230\051\223\052\231\053\227\054\200\055\212" +
    "\077\221\100\207\107\017\001\002\000\050\003\ufebb\006" +
    "\ufebb\027\ufebb\030\ufebb\031\ufebb\032\ufebb\037\ufebb\040\ufebb" +
    "\043\ufebb\045\ufebb\046\ufebb\051\ufebb\052\ufebb\053\ufebb\054" +
    "\ufebb\055\ufebb\077\ufebb\100\ufebb\107\ufebb\001\002\000\020" +
    "\003\076\012\066\014\050\047\062\050\065\107\067\111" +
    "\061\001\002\000\020\003\076\012\066\014\050\047\062" +
    "\050\065\107\067\111\061\001\002\000\012\003\u01ec\013" +
    "\u01ed\015\101\016\072\001\002\000\062\003\u01f0\006\u01d9" +
    "\012\066\014\050\027\023\030\020\031\013\032\217\037" +
    "\240\040\210\043\215\045\214\046\230\047\062\050\065" +
    "\051\223\052\231\053\227\054\200\055\212\077\221\100" +
    "\207\107\u01ef\111\061\001\002\000\050\003\u01da\006\u01d9" +
    "\027\023\030\020\031\013\032\217\037\240\040\210\043" +
    "\215\045\214\046\230\051\223\052\231\053\227\054\200" +
    "\055\212\077\221\100\207\107\017\001\002\000\050\003" +
    "\ufeb7\006\ufeb7\027\ufeb7\030\ufeb7\031\ufeb7\032\ufeb7\037\ufeb7" +
    "\040\ufeb7\043\ufeb7\045\ufeb7\046\ufeb7\051\ufeb7\052\ufeb7\053" +
    "\ufeb7\054\ufeb7\055\ufeb7\077\ufeb7\100\ufeb7\107\ufeb7\001\002" +
    "\000\034\003\153\011\154\013\uffc8\015\uffc8\016\uffc8\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\001\002\000\114\003\076\006\uff9d\007\u012b\011" +
    "\031\012\066\013\uffc7\014\050\015\101\016\072\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\077\026" +
    "\071\027\uff9d\030\uff9d\031\uff9d\032\uff9d\037\uff9d\040\uff9d" +
    "\043\uff9d\045\uff9d\046\uff9d\047\062\050\065\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\077\uff9d\100\uff9d\107\u01f2" +
    "\111\061\001\002\000\050\003\ufeb5\006\ufeb5\027\ufeb5\030" +
    "\ufeb5\031\ufeb5\032\ufeb5\037\ufeb5\040\ufeb5\043\ufeb5\045\ufeb5" +
    "\046\ufeb5\051\ufeb5\052\ufeb5\053\ufeb5\054\ufeb5\055\ufeb5\077" +
    "\ufeb5\100\ufeb5\107\ufeb5\001\002\000\036\003\uffc8\007\uffa3" +
    "\011\u012c\013\uffc8\015\uffc8\016\uffc8\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\001\002" +
    "\000\012\003\104\013\u01f4\015\101\016\072\001\002\000" +
    "\050\003\u01da\006\u01d9\027\023\030\020\031\013\032\217" +
    "\037\240\040\210\043\215\045\214\046\230\051\223\052" +
    "\231\053\227\054\200\055\212\077\221\100\207\107\017" +
    "\001\002\000\050\003\ufeb6\006\ufeb6\027\ufeb6\030\ufeb6\031" +
    "\ufeb6\032\ufeb6\037\ufeb6\040\ufeb6\043\ufeb6\045\ufeb6\046\ufeb6" +
    "\051\ufeb6\052\ufeb6\053\ufeb6\054\ufeb6\055\ufeb6\077\ufeb6\100" +
    "\ufeb6\107\ufeb6\001\002\000\004\107\u0282\001\002\000\006" +
    "\003\u01f9\107\u01f8\001\002\000\006\003\u027d\076\u027e\001" +
    "\002\000\004\076\u01fa\001\002\000\056\003\u0208\056\u01fd" +
    "\057\u0202\060\u0200\061\u0201\062\u020b\063\u0205\064\u020c\065" +
    "\u0203\066\u0207\067\u020f\070\u020e\071\u020a\072\u020d\073\u0211" +
    "\074\u0209\075\u01ff\101\u01fc\102\u01fb\103\u01fe\104\u0210\105" +
    "\u0206\001\002\000\006\003\u0278\013\u0279\001\002\000\006" +
    "\003\u0273\013\u0274\001\002\000\006\003\u026e\013\u026f\001" +
    "\002\000\006\003\u0269\013\u026a\001\002\000\006\003\u0264" +
    "\013\u0265\001\002\000\006\003\u025f\013\u0260\001\002\000" +
    "\006\003\u025a\013\u025b\001\002\000\006\003\u0255\013\u0256" +
    "\001\002\000\006\003\u0250\013\u0251\001\002\000\050\003" +
    "\uff04\006\uff04\027\uff04\030\uff04\031\uff04\032\uff04\037\uff04" +
    "\040\uff04\043\uff04\045\uff04\046\uff04\051\uff04\052\uff04\053" +
    "\uff04\054\uff04\055\uff04\077\uff04\100\uff04\107\uff04\001\002" +
    "\000\006\003\u024b\013\u024c\001\002\000\006\003\u0246\013" +
    "\u0247\001\002\000\006\003\u0241\013\u0242\001\002\000\004" +
    "\013\u023f\001\002\000\006\003\u023a\013\u023b\001\002\000" +
    "\006\003\u0235\013\u0236\001\002\000\006\003\u0230\013\u0231" +
    "\001\002\000\006\003\u022b\013\u022c\001\002\000\006\003" +
    "\u0226\013\u0227\001\002\000\006\003\u0221\013\u0222\001\002" +
    "\000\006\003\u021c\013\u021d\001\002\000\006\003\u0217\013" +
    "\u0218\001\002\000\006\003\u0212\013\u0213\001\002\000\004" +
    "\007\u0216\001\002\000\006\003\u0214\007\u0215\001\002\000" +
    "\050\003\ufec2\006\ufec2\027\ufec2\030\ufec2\031\ufec2\032\ufec2" +
    "\037\ufec2\040\ufec2\043\ufec2\045\ufec2\046\ufec2\051\ufec2\052" +
    "\ufec2\053\ufec2\054\ufec2\055\ufec2\077\ufec2\100\ufec2\107\ufec2" +
    "\001\002\000\050\003\ufeef\006\ufeef\027\ufeef\030\ufeef\031" +
    "\ufeef\032\ufeef\037\ufeef\040\ufeef\043\ufeef\045\ufeef\046\ufeef" +
    "\051\ufeef\052\ufeef\053\ufeef\054\ufeef\055\ufeef\077\ufeef\100" +
    "\ufeef\107\ufeef\001\002\000\050\003\ufed9\006\ufed9\027\ufed9" +
    "\030\ufed9\031\ufed9\032\ufed9\037\ufed9\040\ufed9\043\ufed9\045" +
    "\ufed9\046\ufed9\051\ufed9\052\ufed9\053\ufed9\054\ufed9\055\ufed9" +
    "\077\ufed9\100\ufed9\107\ufed9\001\002\000\004\007\u021b\001" +
    "\002\000\006\003\u0219\007\u021a\001\002\000\050\003\ufec8" +
    "\006\ufec8\027\ufec8\030\ufec8\031\ufec8\032\ufec8\037\ufec8\040" +
    "\ufec8\043\ufec8\045\ufec8\046\ufec8\051\ufec8\052\ufec8\053\ufec8" +
    "\054\ufec8\055\ufec8\077\ufec8\100\ufec8\107\ufec8\001\002\000" +
    "\050\003\ufef5\006\ufef5\027\ufef5\030\ufef5\031\ufef5\032\ufef5" +
    "\037\ufef5\040\ufef5\043\ufef5\045\ufef5\046\ufef5\051\ufef5\052" +
    "\ufef5\053\ufef5\054\ufef5\055\ufef5\077\ufef5\100\ufef5\107\ufef5" +
    "\001\002\000\050\003\ufedf\006\ufedf\027\ufedf\030\ufedf\031" +
    "\ufedf\032\ufedf\037\ufedf\040\ufedf\043\ufedf\045\ufedf\046\ufedf" +
    "\051\ufedf\052\ufedf\053\ufedf\054\ufedf\055\ufedf\077\ufedf\100" +
    "\ufedf\107\ufedf\001\002\000\004\007\u0220\001\002\000\006" +
    "\003\u021e\007\u021f\001\002\000\050\003\ufec6\006\ufec6\027" +
    "\ufec6\030\ufec6\031\ufec6\032\ufec6\037\ufec6\040\ufec6\043\ufec6" +
    "\045\ufec6\046\ufec6\051\ufec6\052\ufec6\053\ufec6\054\ufec6\055" +
    "\ufec6\077\ufec6\100\ufec6\107\ufec6\001\002\000\050\003\ufef3" +
    "\006\ufef3\027\ufef3\030\ufef3\031\ufef3\032\ufef3\037\ufef3\040" +
    "\ufef3\043\ufef3\045\ufef3\046\ufef3\051\ufef3\052\ufef3\053\ufef3" +
    "\054\ufef3\055\ufef3\077\ufef3\100\ufef3\107\ufef3\001\002\000" +
    "\050\003\ufedd\006\ufedd\027\ufedd\030\ufedd\031\ufedd\032\ufedd" +
    "\037\ufedd\040\ufedd\043\ufedd\045\ufedd\046\ufedd\051\ufedd\052" +
    "\ufedd\053\ufedd\054\ufedd\055\ufedd\077\ufedd\100\ufedd\107\ufedd" +
    "\001\002\000\004\007\u0225\001\002\000\006\003\u0223\007" +
    "\u0224\001\002\000\050\003\ufec5\006\ufec5\027\ufec5\030\ufec5" +
    "\031\ufec5\032\ufec5\037\ufec5\040\ufec5\043\ufec5\045\ufec5\046" +
    "\ufec5\051\ufec5\052\ufec5\053\ufec5\054\ufec5\055\ufec5\077\ufec5" +
    "\100\ufec5\107\ufec5\001\002\000\050\003\ufef2\006\ufef2\027" +
    "\ufef2\030\ufef2\031\ufef2\032\ufef2\037\ufef2\040\ufef2\043\ufef2" +
    "\045\ufef2\046\ufef2\051\ufef2\052\ufef2\053\ufef2\054\ufef2\055" +
    "\ufef2\077\ufef2\100\ufef2\107\ufef2\001\002\000\050\003\ufedc" +
    "\006\ufedc\027\ufedc\030\ufedc\031\ufedc\032\ufedc\037\ufedc\040" +
    "\ufedc\043\ufedc\045\ufedc\046\ufedc\051\ufedc\052\ufedc\053\ufedc" +
    "\054\ufedc\055\ufedc\077\ufedc\100\ufedc\107\ufedc\001\002\000" +
    "\004\007\u022a\001\002\000\006\003\u0228\007\u0229\001\002" +
    "\000\050\003\ufec3\006\ufec3\027\ufec3\030\ufec3\031\ufec3\032" +
    "\ufec3\037\ufec3\040\ufec3\043\ufec3\045\ufec3\046\ufec3\051\ufec3" +
    "\052\ufec3\053\ufec3\054\ufec3\055\ufec3\077\ufec3\100\ufec3\107" +
    "\ufec3\001\002\000\050\003\ufef0\006\ufef0\027\ufef0\030\ufef0" +
    "\031\ufef0\032\ufef0\037\ufef0\040\ufef0\043\ufef0\045\ufef0\046" +
    "\ufef0\051\ufef0\052\ufef0\053\ufef0\054\ufef0\055\ufef0\077\ufef0" +
    "\100\ufef0\107\ufef0\001\002\000\050\003\ufeda\006\ufeda\027" +
    "\ufeda\030\ufeda\031\ufeda\032\ufeda\037\ufeda\040\ufeda\043\ufeda" +
    "\045\ufeda\046\ufeda\051\ufeda\052\ufeda\053\ufeda\054\ufeda\055" +
    "\ufeda\077\ufeda\100\ufeda\107\ufeda\001\002\000\004\007\u022f" +
    "\001\002\000\006\003\u022d\007\u022e\001\002\000\050\003" +
    "\ufecf\006\ufecf\027\ufecf\030\ufecf\031\ufecf\032\ufecf\037\ufecf" +
    "\040\ufecf\043\ufecf\045\ufecf\046\ufecf\051\ufecf\052\ufecf\053" +
    "\ufecf\054\ufecf\055\ufecf\077\ufecf\100\ufecf\107\ufecf\001\002" +
    "\000\050\003\ufefb\006\ufefb\027\ufefb\030\ufefb\031\ufefb\032" +
    "\ufefb\037\ufefb\040\ufefb\043\ufefb\045\ufefb\046\ufefb\051\ufefb" +
    "\052\ufefb\053\ufefb\054\ufefb\055\ufefb\077\ufefb\100\ufefb\107" +
    "\ufefb\001\002\000\050\003\ufee6\006\ufee6\027\ufee6\030\ufee6" +
    "\031\ufee6\032\ufee6\037\ufee6\040\ufee6\043\ufee6\045\ufee6\046" +
    "\ufee6\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055\ufee6\077\ufee6" +
    "\100\ufee6\107\ufee6\001\002\000\004\007\u0234\001\002\000" +
    "\006\003\u0232\007\u0233\001\002\000\050\003\ufed1\006\ufed1" +
    "\027\ufed1\030\ufed1\031\ufed1\032\ufed1\037\ufed1\040\ufed1\043" +
    "\ufed1\045\ufed1\046\ufed1\051\ufed1\052\ufed1\053\ufed1\054\ufed1" +
    "\055\ufed1\077\ufed1\100\ufed1\107\ufed1\001\002\000\050\003" +
    "\ufefd\006\ufefd\027\ufefd\030\ufefd\031\ufefd\032\ufefd\037\ufefd" +
    "\040\ufefd\043\ufefd\045\ufefd\046\ufefd\051\ufefd\052\ufefd\053" +
    "\ufefd\054\ufefd\055\ufefd\077\ufefd\100\ufefd\107\ufefd\001\002" +
    "\000\050\003\ufee8\006\ufee8\027\ufee8\030\ufee8\031\ufee8\032" +
    "\ufee8\037\ufee8\040\ufee8\043\ufee8\045\ufee8\046\ufee8\051\ufee8" +
    "\052\ufee8\053\ufee8\054\ufee8\055\ufee8\077\ufee8\100\ufee8\107" +
    "\ufee8\001\002\000\004\007\u0239\001\002\000\006\003\u0237" +
    "\007\u0238\001\002\000\050\003\ufec4\006\ufec4\027\ufec4\030" +
    "\ufec4\031\ufec4\032\ufec4\037\ufec4\040\ufec4\043\ufec4\045\ufec4" +
    "\046\ufec4\051\ufec4\052\ufec4\053\ufec4\054\ufec4\055\ufec4\077" +
    "\ufec4\100\ufec4\107\ufec4\001\002\000\050\003\ufef1\006\ufef1" +
    "\027\ufef1\030\ufef1\031\ufef1\032\ufef1\037\ufef1\040\ufef1\043" +
    "\ufef1\045\ufef1\046\ufef1\051\ufef1\052\ufef1\053\ufef1\054\ufef1" +
    "\055\ufef1\077\ufef1\100\ufef1\107\ufef1\001\002\000\050\003" +
    "\ufedb\006\ufedb\027\ufedb\030\ufedb\031\ufedb\032\ufedb\037\ufedb" +
    "\040\ufedb\043\ufedb\045\ufedb\046\ufedb\051\ufedb\052\ufedb\053" +
    "\ufedb\054\ufedb\055\ufedb\077\ufedb\100\ufedb\107\ufedb\001\002" +
    "\000\004\007\u023e\001\002\000\006\003\u023c\007\u023d\001" +
    "\002\000\050\003\ufec1\006\ufec1\027\ufec1\030\ufec1\031\ufec1" +
    "\032\ufec1\037\ufec1\040\ufec1\043\ufec1\045\ufec1\046\ufec1\051" +
    "\ufec1\052\ufec1\053\ufec1\054\ufec1\055\ufec1\077\ufec1\100\ufec1" +
    "\107\ufec1\001\002\000\050\003\ufeee\006\ufeee\027\ufeee\030" +
    "\ufeee\031\ufeee\032\ufeee\037\ufeee\040\ufeee\043\ufeee\045\ufeee" +
    "\046\ufeee\051\ufeee\052\ufeee\053\ufeee\054\ufeee\055\ufeee\077" +
    "\ufeee\100\ufeee\107\ufeee\001\002\000\050\003\ufed8\006\ufed8" +
    "\027\ufed8\030\ufed8\031\ufed8\032\ufed8\037\ufed8\040\ufed8\043" +
    "\ufed8\045\ufed8\046\ufed8\051\ufed8\052\ufed8\053\ufed8\054\ufed8" +
    "\055\ufed8\077\ufed8\100\ufed8\107\ufed8\001\002\000\004\007" +
    "\u0240\001\002\000\050\003\ufed6\006\ufed6\027\ufed6\030\ufed6" +
    "\031\ufed6\032\ufed6\037\ufed6\040\ufed6\043\ufed6\045\ufed6\046" +
    "\ufed6\051\ufed6\052\ufed6\053\ufed6\054\ufed6\055\ufed6\077\ufed6" +
    "\100\ufed6\107\ufed6\001\002\000\004\007\u0245\001\002\000" +
    "\006\003\u0243\007\u0244\001\002\000\050\003\ufecc\006\ufecc" +
    "\027\ufecc\030\ufecc\031\ufecc\032\ufecc\037\ufecc\040\ufecc\043" +
    "\ufecc\045\ufecc\046\ufecc\051\ufecc\052\ufecc\053\ufecc\054\ufecc" +
    "\055\ufecc\077\ufecc\100\ufecc\107\ufecc\001\002\000\050\003" +
    "\ufef9\006\ufef9\027\ufef9\030\ufef9\031\ufef9\032\ufef9\037\ufef9" +
    "\040\ufef9\043\ufef9\045\ufef9\046\ufef9\051\ufef9\052\ufef9\053" +
    "\ufef9\054\ufef9\055\ufef9\077\ufef9\100\ufef9\107\ufef9\001\002" +
    "\000\050\003\ufee3\006\ufee3\027\ufee3\030\ufee3\031\ufee3\032" +
    "\ufee3\037\ufee3\040\ufee3\043\ufee3\045\ufee3\046\ufee3\051\ufee3" +
    "\052\ufee3\053\ufee3\054\ufee3\055\ufee3\077\ufee3\100\ufee3\107" +
    "\ufee3\001\002\000\004\007\u024a\001\002\000\006\003\u0248" +
    "\007\u0249\001\002\000\050\003\ufec7\006\ufec7\027\ufec7\030" +
    "\ufec7\031\ufec7\032\ufec7\037\ufec7\040\ufec7\043\ufec7\045\ufec7" +
    "\046\ufec7\051\ufec7\052\ufec7\053\ufec7\054\ufec7\055\ufec7\077" +
    "\ufec7\100\ufec7\107\ufec7\001\002\000\050\003\ufef4\006\ufef4" +
    "\027\ufef4\030\ufef4\031\ufef4\032\ufef4\037\ufef4\040\ufef4\043" +
    "\ufef4\045\ufef4\046\ufef4\051\ufef4\052\ufef4\053\ufef4\054\ufef4" +
    "\055\ufef4\077\ufef4\100\ufef4\107\ufef4\001\002\000\050\003" +
    "\ufede\006\ufede\027\ufede\030\ufede\031\ufede\032\ufede\037\ufede" +
    "\040\ufede\043\ufede\045\ufede\046\ufede\051\ufede\052\ufede\053" +
    "\ufede\054\ufede\055\ufede\077\ufede\100\ufede\107\ufede\001\002" +
    "\000\004\007\u024f\001\002\000\006\003\u024d\007\u024e\001" +
    "\002\000\050\003\ufed0\006\ufed0\027\ufed0\030\ufed0\031\ufed0" +
    "\032\ufed0\037\ufed0\040\ufed0\043\ufed0\045\ufed0\046\ufed0\051" +
    "\ufed0\052\ufed0\053\ufed0\054\ufed0\055\ufed0\077\ufed0\100\ufed0" +
    "\107\ufed0\001\002\000\050\003\ufefc\006\ufefc\027\ufefc\030" +
    "\ufefc\031\ufefc\032\ufefc\037\ufefc\040\ufefc\043\ufefc\045\ufefc" +
    "\046\ufefc\051\ufefc\052\ufefc\053\ufefc\054\ufefc\055\ufefc\077" +
    "\ufefc\100\ufefc\107\ufefc\001\002\000\050\003\ufee7\006\ufee7" +
    "\027\ufee7\030\ufee7\031\ufee7\032\ufee7\037\ufee7\040\ufee7\043" +
    "\ufee7\045\ufee7\046\ufee7\051\ufee7\052\ufee7\053\ufee7\054\ufee7" +
    "\055\ufee7\077\ufee7\100\ufee7\107\ufee7\001\002\000\004\007" +
    "\u0254\001\002\000\006\003\u0252\007\u0253\001\002\000\050" +
    "\003\ufece\006\ufece\027\ufece\030\ufece\031\ufece\032\ufece\037" +
    "\ufece\040\ufece\043\ufece\045\ufece\046\ufece\051\ufece\052\ufece" +
    "\053\ufece\054\ufece\055\ufece\077\ufece\100\ufece\107\ufece\001" +
    "\002\000\050\003\ufefa\006\ufefa\027\ufefa\030\ufefa\031\ufefa" +
    "\032\ufefa\037\ufefa\040\ufefa\043\ufefa\045\ufefa\046\ufefa\051" +
    "\ufefa\052\ufefa\053\ufefa\054\ufefa\055\ufefa\077\ufefa\100\ufefa" +
    "\107\ufefa\001\002\000\050\003\ufee5\006\ufee5\027\ufee5\030" +
    "\ufee5\031\ufee5\032\ufee5\037\ufee5\040\ufee5\043\ufee5\045\ufee5" +
    "\046\ufee5\051\ufee5\052\ufee5\053\ufee5\054\ufee5\055\ufee5\077" +
    "\ufee5\100\ufee5\107\ufee5\001\002\000\004\007\u0259\001\002" +
    "\000\006\003\u0257\007\u0258\001\002\000\050\003\ufed4\006" +
    "\ufed4\027\ufed4\030\ufed4\031\ufed4\032\ufed4\037\ufed4\040\ufed4" +
    "\043\ufed4\045\ufed4\046\ufed4\051\ufed4\052\ufed4\053\ufed4\054" +
    "\ufed4\055\ufed4\077\ufed4\100\ufed4\107\ufed4\001\002\000\050" +
    "\003\uff00\006\uff00\027\uff00\030\uff00\031\uff00\032\uff00\037" +
    "\uff00\040\uff00\043\uff00\045\uff00\046\uff00\051\uff00\052\uff00" +
    "\053\uff00\054\uff00\055\uff00\077\uff00\100\uff00\107\uff00\001" +
    "\002\000\050\003\ufeeb\006\ufeeb\027\ufeeb\030\ufeeb\031\ufeeb" +
    "\032\ufeeb\037\ufeeb\040\ufeeb\043\ufeeb\045\ufeeb\046\ufeeb\051" +
    "\ufeeb\052\ufeeb\053\ufeeb\054\ufeeb\055\ufeeb\077\ufeeb\100\ufeeb" +
    "\107\ufeeb\001\002\000\004\007\u025e\001\002\000\006\003" +
    "\u025c\007\u025d\001\002\000\050\003\ufed2\006\ufed2\027\ufed2" +
    "\030\ufed2\031\ufed2\032\ufed2\037\ufed2\040\ufed2\043\ufed2\045" +
    "\ufed2\046\ufed2\051\ufed2\052\ufed2\053\ufed2\054\ufed2\055\ufed2" +
    "\077\ufed2\100\ufed2\107\ufed2\001\002\000\050\003\ufefe\006" +
    "\ufefe\027\ufefe\030\ufefe\031\ufefe\032\ufefe\037\ufefe\040\ufefe" +
    "\043\ufefe\045\ufefe\046\ufefe\051\ufefe\052\ufefe\053\ufefe\054" +
    "\ufefe\055\ufefe\077\ufefe\100\ufefe\107\ufefe\001\002\000\050" +
    "\003\ufee9\006\ufee9\027\ufee9\030\ufee9\031\ufee9\032\ufee9\037" +
    "\ufee9\040\ufee9\043\ufee9\045\ufee9\046\ufee9\051\ufee9\052\ufee9" +
    "\053\ufee9\054\ufee9\055\ufee9\077\ufee9\100\ufee9\107\ufee9\001" +
    "\002\000\004\007\u0263\001\002\000\006\003\u0261\007\u0262" +
    "\001\002\000\050\003\ufed3\006\ufed3\027\ufed3\030\ufed3\031" +
    "\ufed3\032\ufed3\037\ufed3\040\ufed3\043\ufed3\045\ufed3\046\ufed3" +
    "\051\ufed3\052\ufed3\053\ufed3\054\ufed3\055\ufed3\077\ufed3\100" +
    "\ufed3\107\ufed3\001\002\000\050\003\ufeff\006\ufeff\027\ufeff" +
    "\030\ufeff\031\ufeff\032\ufeff\037\ufeff\040\ufeff\043\ufeff\045" +
    "\ufeff\046\ufeff\051\ufeff\052\ufeff\053\ufeff\054\ufeff\055\ufeff" +
    "\077\ufeff\100\ufeff\107\ufeff\001\002\000\050\003\ufeea\006" +
    "\ufeea\027\ufeea\030\ufeea\031\ufeea\032\ufeea\037\ufeea\040\ufeea" +
    "\043\ufeea\045\ufeea\046\ufeea\051\ufeea\052\ufeea\053\ufeea\054" +
    "\ufeea\055\ufeea\077\ufeea\100\ufeea\107\ufeea\001\002\000\004" +
    "\007\u0268\001\002\000\006\003\u0266\007\u0267\001\002\000" +
    "\050\003\ufec0\006\ufec0\027\ufec0\030\ufec0\031\ufec0\032\ufec0" +
    "\037\ufec0\040\ufec0\043\ufec0\045\ufec0\046\ufec0\051\ufec0\052" +
    "\ufec0\053\ufec0\054\ufec0\055\ufec0\077\ufec0\100\ufec0\107\ufec0" +
    "\001\002\000\050\003\ufeed\006\ufeed\027\ufeed\030\ufeed\031" +
    "\ufeed\032\ufeed\037\ufeed\040\ufeed\043\ufeed\045\ufeed\046\ufeed" +
    "\051\ufeed\052\ufeed\053\ufeed\054\ufeed\055\ufeed\077\ufeed\100" +
    "\ufeed\107\ufeed\001\002\000\050\003\ufed7\006\ufed7\027\ufed7" +
    "\030\ufed7\031\ufed7\032\ufed7\037\ufed7\040\ufed7\043\ufed7\045" +
    "\ufed7\046\ufed7\051\ufed7\052\ufed7\053\ufed7\054\ufed7\055\ufed7" +
    "\077\ufed7\100\ufed7\107\ufed7\001\002\000\004\007\u026d\001" +
    "\002\000\006\003\u026b\007\u026c\001\002\000\050\003\ufec9" +
    "\006\ufec9\027\ufec9\030\ufec9\031\ufec9\032\ufec9\037\ufec9\040" +
    "\ufec9\043\ufec9\045\ufec9\046\ufec9\051\ufec9\052\ufec9\053\ufec9" +
    "\054\ufec9\055\ufec9\077\ufec9\100\ufec9\107\ufec9\001\002\000" +
    "\050\003\ufef6\006\ufef6\027\ufef6\030\ufef6\031\ufef6\032\ufef6" +
    "\037\ufef6\040\ufef6\043\ufef6\045\ufef6\046\ufef6\051\ufef6\052" +
    "\ufef6\053\ufef6\054\ufef6\055\ufef6\077\ufef6\100\ufef6\107\ufef6" +
    "\001\002\000\050\003\ufee0\006\ufee0\027\ufee0\030\ufee0\031" +
    "\ufee0\032\ufee0\037\ufee0\040\ufee0\043\ufee0\045\ufee0\046\ufee0" +
    "\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\077\ufee0\100" +
    "\ufee0\107\ufee0\001\002\000\004\007\u0272\001\002\000\006" +
    "\003\u0270\007\u0271\001\002\000\050\003\ufed5\006\ufed5\027" +
    "\ufed5\030\ufed5\031\ufed5\032\ufed5\037\ufed5\040\ufed5\043\ufed5" +
    "\045\ufed5\046\ufed5\051\ufed5\052\ufed5\053\ufed5\054\ufed5\055" +
    "\ufed5\077\ufed5\100\ufed5\107\ufed5\001\002\000\050\003\uff01" +
    "\006\uff01\027\uff01\030\uff01\031\uff01\032\uff01\037\uff01\040" +
    "\uff01\043\uff01\045\uff01\046\uff01\051\uff01\052\uff01\053\uff01" +
    "\054\uff01\055\uff01\077\uff01\100\uff01\107\uff01\001\002\000" +
    "\050\003\ufeec\006\ufeec\027\ufeec\030\ufeec\031\ufeec\032\ufeec" +
    "\037\ufeec\040\ufeec\043\ufeec\045\ufeec\046\ufeec\051\ufeec\052" +
    "\ufeec\053\ufeec\054\ufeec\055\ufeec\077\ufeec\100\ufeec\107\ufeec" +
    "\001\002\000\004\007\u0277\001\002\000\006\003\u0275\007" +
    "\u0276\001\002\000\050\003\ufecb\006\ufecb\027\ufecb\030\ufecb" +
    "\031\ufecb\032\ufecb\037\ufecb\040\ufecb\043\ufecb\045\ufecb\046" +
    "\ufecb\051\ufecb\052\ufecb\053\ufecb\054\ufecb\055\ufecb\077\ufecb" +
    "\100\ufecb\107\ufecb\001\002\000\050\003\ufef8\006\ufef8\027" +
    "\ufef8\030\ufef8\031\ufef8\032\ufef8\037\ufef8\040\ufef8\043\ufef8" +
    "\045\ufef8\046\ufef8\051\ufef8\052\ufef8\053\ufef8\054\ufef8\055" +
    "\ufef8\077\ufef8\100\ufef8\107\ufef8\001\002\000\050\003\ufee2" +
    "\006\ufee2\027\ufee2\030\ufee2\031\ufee2\032\ufee2\037\ufee2\040" +
    "\ufee2\043\ufee2\045\ufee2\046\ufee2\051\ufee2\052\ufee2\053\ufee2" +
    "\054\ufee2\055\ufee2\077\ufee2\100\ufee2\107\ufee2\001\002\000" +
    "\004\007\u027c\001\002\000\006\003\u027a\007\u027b\001\002" +
    "\000\050\003\ufeca\006\ufeca\027\ufeca\030\ufeca\031\ufeca\032" +
    "\ufeca\037\ufeca\040\ufeca\043\ufeca\045\ufeca\046\ufeca\051\ufeca" +
    "\052\ufeca\053\ufeca\054\ufeca\055\ufeca\077\ufeca\100\ufeca\107" +
    "\ufeca\001\002\000\050\003\ufef7\006\ufef7\027\ufef7\030\ufef7" +
    "\031\ufef7\032\ufef7\037\ufef7\040\ufef7\043\ufef7\045\ufef7\046" +
    "\ufef7\051\ufef7\052\ufef7\053\ufef7\054\ufef7\055\ufef7\077\ufef7" +
    "\100\ufef7\107\ufef7\001\002\000\050\003\ufee1\006\ufee1\027" +
    "\ufee1\030\ufee1\031\ufee1\032\ufee1\037\ufee1\040\ufee1\043\ufee1" +
    "\045\ufee1\046\ufee1\051\ufee1\052\ufee1\053\ufee1\054\ufee1\055" +
    "\ufee1\077\ufee1\100\ufee1\107\ufee1\001\002\000\056\003\u0208" +
    "\056\u01fd\057\u0202\060\u0200\061\u0201\062\u020b\063\u0205\064" +
    "\u020c\065\u0203\066\u0207\067\u020f\070\u020e\071\u020a\072\u020d" +
    "\073\u0211\074\u0209\075\u01ff\101\u01fc\102\u01fb\103\u01fe\104" +
    "\u0210\105\u0206\001\002\000\056\003\u0280\056\u01fd\057\u0202" +
    "\060\u0200\061\u0201\062\u020b\063\u0205\064\u020c\065\u0203\066" +
    "\u0207\067\u020f\070\u020e\071\u020a\072\u020d\073\u0211\074\u0209" +
    "\075\u01ff\101\u01fc\102\u01fb\103\u01fe\104\u0210\105\u0206\001" +
    "\002\000\050\003\uff06\006\uff06\027\uff06\030\uff06\031\uff06" +
    "\032\uff06\037\uff06\040\uff06\043\uff06\045\uff06\046\uff06\051" +
    "\uff06\052\uff06\053\uff06\054\uff06\055\uff06\077\uff06\100\uff06" +
    "\107\uff06\001\002\000\052\003\uff02\006\uff02\013\u023f\027" +
    "\uff02\030\uff02\031\uff02\032\uff02\037\uff02\040\uff02\043\uff02" +
    "\045\uff02\046\uff02\051\uff02\052\uff02\053\uff02\054\uff02\055" +
    "\uff02\077\uff02\100\uff02\107\uff02\001\002\000\050\003\uff03" +
    "\006\uff03\027\uff03\030\uff03\031\uff03\032\uff03\037\uff03\040" +
    "\uff03\043\uff03\045\uff03\046\uff03\051\uff03\052\uff03\053\uff03" +
    "\054\uff03\055\uff03\077\uff03\100\uff03\107\uff03\001\002\000" +
    "\004\076\u0283\001\002\000\056\003\u0208\056\u01fd\057\u0202" +
    "\060\u0200\061\u0201\062\u020b\063\u0205\064\u020c\065\u0203\066" +
    "\u0207\067\u020f\070\u020e\071\u020a\072\u020d\073\u0211\074\u0209" +
    "\075\u01ff\101\u01fc\102\u01fb\103\u01fe\104\u0210\105\u0206\001" +
    "\002\000\050\003\uff05\006\uff05\027\uff05\030\uff05\031\uff05" +
    "\032\uff05\037\uff05\040\uff05\043\uff05\045\uff05\046\uff05\051" +
    "\uff05\052\uff05\053\uff05\054\uff05\055\uff05\077\uff05\100\uff05" +
    "\107\uff05\001\002\000\006\003\u0614\011\u0615\001\002\000" +
    "\004\011\u0287\001\002\000\004\033\u0288\001\002\000\004" +
    "\040\u0289\001\002\000\004\012\u028a\001\002\000\012\003" +
    "\u028b\012\124\107\102\111\061\001\002\000\020\003\122" +
    "\012\124\025\077\026\071\034\u05ec\107\102\111\061\001" +
    "\002\000\004\013\u05ea\001\002\000\006\003\u028e\034\u028f" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\012\003\u0290\012\124\107\102\111\061\001\002" +
    "\000\020\003\122\012\124\025\077\026\071\034\u059d\107" +
    "\102\111\061\001\002\000\006\003\u0292\034\u0293\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\012\003\u0294\012\124\107\102\111\061\001\002\000\020" +
    "\003\122\012\124\025\077\026\071\034\u0554\107\102\111" +
    "\061\001\002\000\006\003\u0296\034\u0297\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\012\003" +
    "\u0298\012\124\107\102\111\061\001\002\000\020\003\122" +
    "\012\124\025\077\026\071\034\u050f\107\102\111\061\001" +
    "\002\000\006\003\u029a\034\u029b\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\012\003\u029c\012" +
    "\124\107\102\111\061\001\002\000\020\003\122\012\124" +
    "\025\077\026\071\034\u04ce\107\102\111\061\001\002\000" +
    "\006\003\u029e\034\u029f\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\012\003\u02a0\012\124\107" +
    "\102\111\061\001\002\000\020\003\122\012\124\025\077" +
    "\026\071\034\u0491\107\102\111\061\001\002\000\006\003" +
    "\u02a2\034\u02a3\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\012\003\u02a4\012\124\107\102\111" +
    "\061\001\002\000\020\003\122\012\124\025\077\026\071" +
    "\034\u0458\107\102\111\061\001\002\000\006\003\u02a6\034" +
    "\u02a7\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\012\003\u02a8\012\124\107\102\111\061\001" +
    "\002\000\020\003\122\012\124\025\077\026\071\034\u0423" +
    "\107\102\111\061\001\002\000\006\003\u02aa\034\u02ab\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\012\003\u02ac\012\124\107\102\111\061\001\002\000" +
    "\020\003\122\012\124\025\077\026\071\034\u03f2\107\102" +
    "\111\061\001\002\000\006\003\u02ae\034\u02af\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\012" +
    "\003\u02b0\012\124\107\102\111\061\001\002\000\020\003" +
    "\122\012\124\025\077\026\071\034\u03c5\107\102\111\061" +
    "\001\002\000\006\003\u02b2\034\u02b3\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\012\003\u02b4" +
    "\012\124\107\102\111\061\001\002\000\020\003\122\012" +
    "\124\025\077\026\071\034\u039c\107\102\111\061\001\002" +
    "\000\006\003\u02b6\034\u02b7\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\012\003\u02b8\012\124" +
    "\107\102\111\061\001\002\000\020\003\122\012\124\025" +
    "\077\026\071\034\u0377\107\102\111\061\001\002\000\006" +
    "\003\u02ba\034\u02bb\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\012\003\u02bc\012\124\107\102" +
    "\111\061\001\002\000\020\003\122\012\124\025\077\026" +
    "\071\034\u0356\107\102\111\061\001\002\000\006\003\u02be" +
    "\034\u02bf\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\012\003\u02c0\012\124\107\102\111\061" +
    "\001\002\000\020\003\122\012\124\025\077\026\071\034" +
    "\u0339\107\102\111\061\001\002\000\006\003\u02c2\034\u02c3" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\012\003\u02c4\012\124\107\102\111\061\001\002" +
    "\000\020\003\122\012\124\025\077\026\071\034\u0320\107" +
    "\102\111\061\001\002\000\006\003\u02c6\034\u02c7\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\012\003\u02c8\012\124\107\102\111\061\001\002\000\020" +
    "\003\122\012\124\025\077\026\071\034\u030b\107\102\111" +
    "\061\001\002\000\006\003\u02ca\034\u02cb\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\012\003" +
    "\u02cc\012\124\107\102\111\061\001\002\000\020\003\122" +
    "\012\124\025\077\026\071\034\u02fa\107\102\111\061\001" +
    "\002\000\006\003\u02ce\034\u02cf\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\012\003\u02d0\012" +
    "\124\107\102\111\061\001\002\000\020\003\122\012\124" +
    "\025\077\026\071\034\u02ed\107\102\111\061\001\002\000" +
    "\006\003\u02d2\034\u02d3\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\012\003\u02d4\012\124\107" +
    "\102\111\061\001\002\000\020\003\122\012\124\025\077" +
    "\026\071\034\u02e4\107\102\111\061\001\002\000\006\003" +
    "\u02d6\034\u02d7\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\012\003\u02d8\012\124\107\102\111" +
    "\061\001\002\000\020\003\122\012\124\025\077\026\071" +
    "\034\u02df\107\102\111\061\001\002\000\006\003\u02da\034" +
    "\u02db\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\012\003\u02dc\012\124\107\102\111\061\001" +
    "\002\000\020\003\122\012\124\013\uffad\025\077\026\071" +
    "\107\102\111\061\001\002\000\006\003\uff76\013\uff76\001" +
    "\002\000\006\003\uff4e\013\uff4e\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\006\003\uff4f\013" +
    "\uff4f\001\002\000\004\034\u02e2\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\006\003\uff50\013" +
    "\uff50\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u02e6\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\006\003\uff51\013\uff51" +
    "\001\002\000\004\034\u02e9\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u02eb\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\006\003\uff52\013\uff52\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u02ef\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u02f1\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\006\003\uff53\013\uff53\001\002\000\004" +
    "\034\u02f4\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u02f6\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u02f8\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\006\003\uff54\013\uff54\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u02fc\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u02fe\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0300\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\006\003\uff55" +
    "\013\uff55\001\002\000\004\034\u0303\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0305" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0307\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0309\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\006" +
    "\003\uff56\013\uff56\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u030d\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u030f\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0311\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0313\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\006\003\uff57\013\uff57\001\002\000\004\034\u0316\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0318\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u031a\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u031c" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u031e\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\006\003\uff58\013\uff58\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u0322\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u0324\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u0326\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0328\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u032a\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\006\003\uff59\013\uff59\001\002\000\004\034\u032d\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u032f\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0331\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0333" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0335\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0337\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\006" +
    "\003\uff5a\013\uff5a\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u033b\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u033d\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u033f\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0341\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0343\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0345\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\006\003\uff5b" +
    "\013\uff5b\001\002\000\004\034\u0348\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u034a" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u034c\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u034e\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u0350\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u0352\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u0354\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\006\003\uff5c\013\uff5c\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0358\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u035a\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u035c\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u035e" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0360\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0362\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u0364\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\006\003\uff5d\013\uff5d\001\002\000\004" +
    "\034\u0367\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u0369\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u036b\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u036d\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u036f\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u0371\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0373\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0375\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\006\003\uff5e\013\uff5e\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0379\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u037b\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u037d\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u037f\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u0381\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u0383\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u0385\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0387\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\006\003\uff5f\013\uff5f" +
    "\001\002\000\004\034\u038a\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u038c\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u038e\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0390\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0392" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0394\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0396\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u0398\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u039a\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\006\003\uff60\013" +
    "\uff60\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u039e\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u03a0\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u03a2\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u03a4\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u03a6" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u03a8\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u03aa\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u03ac\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u03ae\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\006\003\uff61\013" +
    "\uff61\001\002\000\004\034\u03b1\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u03b3\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u03b5\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u03b7\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u03b9\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u03bb\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u03bd\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u03bf\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u03c1\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u03c3" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\006\003\uff62\013\uff62\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u03c7\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u03c9\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u03cb\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u03cd\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u03cf\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u03d1\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u03d3\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u03d5\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u03d7" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u03d9\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\006\003\uff63\013\uff63\001" +
    "\002\000\004\034\u03dc\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u03de\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u03e0\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u03e2\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u03e4\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u03e6\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u03e8\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u03ea\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u03ec\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u03ee\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u03f0\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\006\003\uff64\013\uff64\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u03f4\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u03f6\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u03f8\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u03fa\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u03fc\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u03fe\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0400\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0402\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0404\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0406\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0408" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\006\003\uff65\013\uff65\001\002\000\004\034\u040b" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u040d\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u040f\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u0411\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u0413\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u0415\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u0417\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u0419\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u041b\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u041d\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u041f\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0421\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\006\003\uff66\013\uff66\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u0425\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u0427\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u0429\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u042b\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u042d\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u042f\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0431\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0433\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0435\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0437\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0439" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u043b\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\006\003\uff67\013\uff67\001" +
    "\002\000\004\034\u043e\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0440\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u0442\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u0444\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u0446\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u0448\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u044a\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u044c\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u044e\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0450\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0452\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0454\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0456" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\006\003\uff68\013\uff68\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u045a\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u045c\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u045e\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u0460\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0462\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0464\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0466\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0468\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u046a" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u046c\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u046e\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u0470\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u0472\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\006\003\uff69\013" +
    "\uff69\001\002\000\004\034\u0475\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u0477\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u0479\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u047b\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u047d\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u047f\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0481\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0483\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0485\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0487" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0489\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u048b\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u048d\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u048f\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\006\003\uff6a\013" +
    "\uff6a\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0493\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0495\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0497\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0499\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u049b" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u049d\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u049f\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u04a1\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u04a3\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u04a5\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u04a7\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u04a9\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u04ab\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u04ad\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\006\003\uff6b\013\uff6b" +
    "\001\002\000\004\034\u04b0\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u04b2\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u04b4\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u04b6\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u04b8" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u04ba\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u04bc\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u04be\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u04c0\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u04c2\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u04c4\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u04c6\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u04c8\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u04ca\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u04cc\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\006\003\uff6c\013\uff6c\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u04d0\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u04d2\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u04d4\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u04d6\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u04d8\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u04da\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u04dc\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u04de\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u04e0\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u04e2\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u04e4\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u04e6" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u04e8\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u04ea\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u04ec\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\006\003\uff6d\013\uff6d\001\002\000\004" +
    "\034\u04ef\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u04f1\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u04f3\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u04f5\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u04f7\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u04f9\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u04fb\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u04fd\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u04ff\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0501\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0503" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0505\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0507\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u0509\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u050b\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u050d\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\006\003\uff6e\013\uff6e\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0511\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0513\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0515\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0517" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0519\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u051b\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u051d\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u051f\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u0521\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u0523\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u0525\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u0527\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0529\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u052b\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u052d\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u052f\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\006\003\uff6f" +
    "\013\uff6f\001\002\000\004\034\u0532\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0534" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0536\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0538\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u053a\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u053c\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u053e\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u0540\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u0542\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u0544\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0546\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0548\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u054a\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u054c\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u054e" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0550\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0552\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\006" +
    "\003\uff70\013\uff70\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u0556\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u0558\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u055a\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u055c\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u055e\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0560\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0562" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0564\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0566\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u0568\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u056a\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u056c\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u056e\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u0570\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u0572\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0574\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0576\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\006\003\uff71\013\uff71\001\002\000\004\034\u0579\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u057b\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u057d\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u057f" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0581\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u0583\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u0585\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u0587\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u0589\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u058b\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u058d\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u058f\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u0591\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0593\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0595\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0597\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0599" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u059b\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\006\003\uff72\013\uff72\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u059f\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u05a1\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u05a3\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u05a5\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u05a7\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u05a9\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u05ab\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u05ad" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u05af\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u05b1\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u05b3\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u05b5\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u05b7\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u05b9\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u05bb\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u05bd\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u05bf\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u05c1\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\006\003\uff73\013\uff73\001\002\000\004\034\u05c4\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u05c6\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u05c8\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u05ca" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u05cc\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u05ce\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u05d0\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u05d2\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u05d4\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u05d6\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u05d8\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u05da\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u05dc\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u05de\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u05e0\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u05e2\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u05e4" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u05e6\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u05e8\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\006" +
    "\003\uff74\013\uff74\001\002\000\004\007\u05eb\001\002\000" +
    "\050\003\uff7e\006\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e" +
    "\037\uff7e\040\uff7e\043\uff7e\045\uff7e\046\uff7e\051\uff7e\052" +
    "\uff7e\053\uff7e\054\uff7e\055\uff7e\077\uff7e\100\uff7e\107\uff7e" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u05ee\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u05f0\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u05f2\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u05f4\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u05f6\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u05f8\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\004\034\u05fa\001\002\000\012" +
    "\003\122\012\124\107\102\111\061\001\002\000\004\034" +
    "\u05fc\001\002\000\012\003\122\012\124\107\102\111\061" +
    "\001\002\000\004\034\u05fe\001\002\000\012\003\122\012" +
    "\124\107\102\111\061\001\002\000\004\034\u0600\001\002" +
    "\000\012\003\122\012\124\107\102\111\061\001\002\000" +
    "\004\034\u0602\001\002\000\012\003\122\012\124\107\102" +
    "\111\061\001\002\000\004\034\u0604\001\002\000\012\003" +
    "\122\012\124\107\102\111\061\001\002\000\004\034\u0606" +
    "\001\002\000\012\003\122\012\124\107\102\111\061\001" +
    "\002\000\004\034\u0608\001\002\000\012\003\122\012\124" +
    "\107\102\111\061\001\002\000\004\034\u060a\001\002\000" +
    "\012\003\122\012\124\107\102\111\061\001\002\000\004" +
    "\034\u060c\001\002\000\012\003\122\012\124\107\102\111" +
    "\061\001\002\000\004\034\u060e\001\002\000\012\003\122" +
    "\012\124\107\102\111\061\001\002\000\004\034\u0610\001" +
    "\002\000\012\003\122\012\124\107\102\111\061\001\002" +
    "\000\004\034\u0612\001\002\000\012\003\122\012\124\107" +
    "\102\111\061\001\002\000\006\003\uff75\013\uff75\001\002" +
    "\000\004\033\u0631\001\002\000\006\003\u0617\033\u0616\001" +
    "\002\000\006\003\u061d\040\u061e\001\002\000\004\040\u0618" +
    "\001\002\000\004\012\u0619\001\002\000\012\003\u028b\012" +
    "\124\107\102\111\061\001\002\000\004\013\u061b\001\002" +
    "\000\004\007\u061c\001\002\000\050\003\uff7c\006\uff7c\027" +
    "\uff7c\030\uff7c\031\uff7c\032\uff7c\037\uff7c\040\uff7c\043\uff7c" +
    "\045\uff7c\046\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055" +
    "\uff7c\077\uff7c\100\uff7c\107\uff7c\001\002\000\004\012\u062d" +
    "\001\002\000\006\003\u061f\012\u0620\001\002\000\012\003" +
    "\u028b\012\124\107\102\111\061\001\002\000\012\003\u0621" +
    "\012\124\107\102\111\061\001\002\000\022\003\122\012" +
    "\124\013\u0628\025\077\026\071\034\u05ec\107\102\111\061" +
    "\001\002\000\006\003\u0623\013\u0624\001\002\000\004\007" +
    "\u0627\001\002\000\006\003\u0625\007\u0626\001\002\000\050" +
    "\003\uff77\006\uff77\027\uff77\030\uff77\031\uff77\032\uff77\037" +
    "\uff77\040\uff77\043\uff77\045\uff77\046\uff77\051\uff77\052\uff77" +
    "\053\uff77\054\uff77\055\uff77\077\uff77\100\uff77\107\uff77\001" +
    "\002\000\050\003\uff7f\006\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\037\uff7f\040\uff7f\043\uff7f\045\uff7f\046\uff7f\051" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\077\uff7f\100\uff7f" +
    "\107\uff7f\001\002\000\050\003\uff78\006\uff78\027\uff78\030" +
    "\uff78\031\uff78\032\uff78\037\uff78\040\uff78\043\uff78\045\uff78" +
    "\046\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\077" +
    "\uff78\100\uff78\107\uff78\001\002\000\004\007\u0629\001\002" +
    "\000\050\003\uff79\006\uff79\027\uff79\030\uff79\031\uff79\032" +
    "\uff79\037\uff79\040\uff79\043\uff79\045\uff79\046\uff79\051\uff79" +
    "\052\uff79\053\uff79\054\uff79\055\uff79\077\uff79\100\uff79\107" +
    "\uff79\001\002\000\004\013\u062b\001\002\000\004\007\u062c" +
    "\001\002\000\050\003\uff7a\006\uff7a\027\uff7a\030\uff7a\031" +
    "\uff7a\032\uff7a\037\uff7a\040\uff7a\043\uff7a\045\uff7a\046\uff7a" +
    "\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\077\uff7a\100" +
    "\uff7a\107\uff7a\001\002\000\012\003\u028b\012\124\107\102" +
    "\111\061\001\002\000\004\013\u062f\001\002\000\004\007" +
    "\u0630\001\002\000\050\003\uff7b\006\uff7b\027\uff7b\030\uff7b" +
    "\031\uff7b\032\uff7b\037\uff7b\040\uff7b\043\uff7b\045\uff7b\046" +
    "\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\077\uff7b" +
    "\100\uff7b\107\uff7b\001\002\000\004\040\u0632\001\002\000" +
    "\004\012\u0633\001\002\000\012\003\u028b\012\124\107\102" +
    "\111\061\001\002\000\004\013\u0635\001\002\000\004\007" +
    "\u0636\001\002\000\050\003\uff7d\006\uff7d\027\uff7d\030\uff7d" +
    "\031\uff7d\032\uff7d\037\uff7d\040\uff7d\043\uff7d\045\uff7d\046" +
    "\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\077\uff7d" +
    "\100\uff7d\107\uff7d\001\002\000\010\003\056\107\055\110" +
    "\040\001\002\000\010\003\u063a\107\055\110\040\001\002" +
    "\000\006\003\u063d\013\u063e\001\002\000\010\003\uffcf\013" +
    "\u063b\025\uffcb\001\002\000\004\007\u063c\001\002\000\050" +
    "\003\uff1d\006\uff1d\027\uff1d\030\uff1d\031\uff1d\032\uff1d\037" +
    "\uff1d\040\uff1d\043\uff1d\045\uff1d\046\uff1d\051\uff1d\052\uff1d" +
    "\053\uff1d\054\uff1d\055\uff1d\077\uff1d\100\uff1d\107\uff1d\001" +
    "\002\000\004\007\u0641\001\002\000\006\003\u063f\007\u0640" +
    "\001\002\000\050\003\uff1b\006\uff1b\027\uff1b\030\uff1b\031" +
    "\uff1b\032\uff1b\037\uff1b\040\uff1b\043\uff1b\045\uff1b\046\uff1b" +
    "\051\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b\077\uff1b\100" +
    "\uff1b\107\uff1b\001\002\000\050\003\uff1f\006\uff1f\027\uff1f" +
    "\030\uff1f\031\uff1f\032\uff1f\037\uff1f\040\uff1f\043\uff1f\045" +
    "\uff1f\046\uff1f\051\uff1f\052\uff1f\053\uff1f\054\uff1f\055\uff1f" +
    "\077\uff1f\100\uff1f\107\uff1f\001\002\000\050\003\uff1c\006" +
    "\uff1c\027\uff1c\030\uff1c\031\uff1c\032\uff1c\037\uff1c\040\uff1c" +
    "\043\uff1c\045\uff1c\046\uff1c\051\uff1c\052\uff1c\053\uff1c\054" +
    "\uff1c\055\uff1c\077\uff1c\100\uff1c\107\uff1c\001\002\000\004" +
    "\013\u0643\001\002\000\004\007\u0644\001\002\000\050\003" +
    "\uff1e\006\uff1e\027\uff1e\030\uff1e\031\uff1e\032\uff1e\037\uff1e" +
    "\040\uff1e\043\uff1e\045\uff1e\046\uff1e\051\uff1e\052\uff1e\053" +
    "\uff1e\054\uff1e\055\uff1e\077\uff1e\100\uff1e\107\uff1e\001\002" +
    "\000\010\003\uffa2\007\u0649\011\031\001\002\000\006\003" +
    "\u0647\007\u0648\001\002\000\050\003\uffe3\006\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\037\uffe3\040\uffe3\043\uffe3\045" +
    "\uffe3\046\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\077\uffe3\100\uffe3\107\uffe3\001\002\000\050\003\uffe9\006" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\037\uffe9\040\uffe9" +
    "\043\uffe9\045\uffe9\046\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\077\uffe9\100\uffe9\107\uffe9\001\002\000\050" +
    "\003\uffe4\006\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\037" +
    "\uffe4\040\uffe4\043\uffe4\045\uffe4\046\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\077\uffe4\100\uffe4\107\uffe4\001" +
    "\002\000\004\107\u0660\001\002\000\006\003\u064d\107\u064c" +
    "\001\002\000\006\003\u0652\034\u0653\001\002\000\004\034" +
    "\u064e\001\002\000\004\107\u064f\001\002\000\004\013\u0650" +
    "\001\002\000\004\007\u0651\001\002\000\050\003\uff0b\006" +
    "\uff0b\027\uff0b\030\uff0b\031\uff0b\032\uff0b\037\uff0b\040\uff0b" +
    "\043\uff0b\045\uff0b\046\uff0b\051\uff0b\052\uff0b\053\uff0b\054" +
    "\uff0b\055\uff0b\077\uff0b\100\uff0b\107\uff0b\001\002\000\004" +
    "\107\u065d\001\002\000\006\003\u0655\107\u0654\001\002\000" +
    "\006\003\u0658\013\u0659\001\002\000\004\013\u0656\001\002" +
    "\000\004\007\u0657\001\002\000\050\003\uff09\006\uff09\027" +
    "\uff09\030\uff09\031\uff09\032\uff09\037\uff09\040\uff09\043\uff09" +
    "\045\uff09\046\uff09\051\uff09\052\uff09\053\uff09\054\uff09\055" +
    "\uff09\077\uff09\100\uff09\107\uff09\001\002\000\004\007\u065c" +
    "\001\002\000\006\003\u065a\007\u065b\001\002\000\050\003" +
    "\uff07\006\uff07\027\uff07\030\uff07\031\uff07\032\uff07\037\uff07" +
    "\040\uff07\043\uff07\045\uff07\046\uff07\051\uff07\052\uff07\053" +
    "\uff07\054\uff07\055\uff07\077\uff07\100\uff07\107\uff07\001\002" +
    "\000\050\003\uff0d\006\uff0d\027\uff0d\030\uff0d\031\uff0d\032" +
    "\uff0d\037\uff0d\040\uff0d\043\uff0d\045\uff0d\046\uff0d\051\uff0d" +
    "\052\uff0d\053\uff0d\054\uff0d\055\uff0d\077\uff0d\100\uff0d\107" +
    "\uff0d\001\002\000\050\003\uff08\006\uff08\027\uff08\030\uff08" +
    "\031\uff08\032\uff08\037\uff08\040\uff08\043\uff08\045\uff08\046" +
    "\uff08\051\uff08\052\uff08\053\uff08\054\uff08\055\uff08\077\uff08" +
    "\100\uff08\107\uff08\001\002\000\004\013\u065e\001\002\000" +
    "\004\007\u065f\001\002\000\050\003\uff0a\006\uff0a\027\uff0a" +
    "\030\uff0a\031\uff0a\032\uff0a\037\uff0a\040\uff0a\043\uff0a\045" +
    "\uff0a\046\uff0a\051\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a" +
    "\077\uff0a\100\uff0a\107\uff0a\001\002\000\004\034\u0661\001" +
    "\002\000\004\107\u0662\001\002\000\004\013\u0663\001\002" +
    "\000\004\007\u0664\001\002\000\050\003\uff0c\006\uff0c\027" +
    "\uff0c\030\uff0c\031\uff0c\032\uff0c\037\uff0c\040\uff0c\043\uff0c" +
    "\045\uff0c\046\uff0c\051\uff0c\052\uff0c\053\uff0c\054\uff0c\055" +
    "\uff0c\077\uff0c\100\uff0c\107\uff0c\001\002\000\050\003\uffe5" +
    "\006\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\037\uffe5\040" +
    "\uffe5\043\uffe5\045\uffe5\046\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\077\uffe5\100\uffe5\107\uffe5\001\002\000" +
    "\050\003\uffea\006\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\037\uffea\040\uffea\043\uffea\045\uffea\046\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\077\uffea\100\uffea\107\uffea" +
    "\001\002\000\016\003\021\006\015\027\023\030\020\031" +
    "\013\107\017\001\002\000\016\003\021\006\015\027\023" +
    "\030\020\031\013\107\017\001\002\000\006\003\ufff3\010" +
    "\ufff3\001\002\000\006\003\uffec\010\uffec\001\002\000\016" +
    "\003\021\006\015\027\023\030\020\031\013\107\017\001" +
    "\002\000\004\010\u066d\001\002\000\004\005\u066e\001\002" +
    "\000\050\003\224\006\213\027\023\030\020\031\013\032" +
    "\217\037\240\040\210\043\215\045\214\046\230\051\223" +
    "\052\231\053\227\054\200\055\212\077\221\100\207\107" +
    "\017\001\002\000\004\002\ufffe\001\002\000\016\003\021" +
    "\006\015\027\023\030\020\031\013\107\017\001\002\000" +
    "\020\003\021\005\u0673\006\015\027\023\030\020\031\013" +
    "\107\017\001\002\000\004\010\u0678\001\002\000\016\003" +
    "\021\006\015\027\023\030\020\031\013\107\017\001\002" +
    "\000\004\010\u0675\001\002\000\004\005\u0676\001\002\000" +
    "\050\003\224\006\213\027\023\030\020\031\013\032\217" +
    "\037\240\040\210\043\215\045\214\046\230\051\223\052" +
    "\231\053\227\054\200\055\212\077\221\100\207\107\017" +
    "\001\002\000\004\002\ufffc\001\002\000\004\005\u0679\001" +
    "\002\000\050\003\224\006\213\027\023\030\020\031\013" +
    "\032\217\037\240\040\210\043\215\045\214\046\230\051" +
    "\223\052\231\053\227\054\200\055\212\077\221\100\207" +
    "\107\017\001\002\000\004\002\ufffb\001\002\000\006\003" +
    "\u067c\010\u067d\001\002\000\006\005\u0684\010\u0685\001\002" +
    "\000\006\003\u067f\005\u067e\001\002\000\050\003\224\006" +
    "\213\027\023\030\020\031\013\032\217\037\240\040\210" +
    "\043\215\045\214\046\230\051\223\052\231\053\227\054" +
    "\200\055\212\077\221\100\207\107\017\001\002\000\052" +
    "\003\224\005\u0681\006\213\027\023\030\020\031\013\032" +
    "\217\037\240\040\210\043\215\045\214\046\230\051\223" +
    "\052\231\053\227\054\200\055\212\077\221\100\207\107" +
    "\017\001\002\000\004\002\ufff7\001\002\000\050\003\224" +
    "\006\213\027\023\030\020\031\013\032\217\037\240\040" +
    "\210\043\215\045\214\046\230\051\223\052\231\053\227" +
    "\054\200\055\212\077\221\100\207\107\017\001\002\000" +
    "\004\002\ufff8\001\002\000\004\002\000\001\002\000\050" +
    "\003\224\006\213\027\023\030\020\031\013\032\217\037" +
    "\240\040\210\043\215\045\214\046\230\051\223\052\231" +
    "\053\227\054\200\055\212\077\221\100\207\107\017\001" +
    "\002\000\004\005\u0686\001\002\000\050\003\224\006\213" +
    "\027\023\030\020\031\013\032\217\037\240\040\210\043" +
    "\215\045\214\046\230\051\223\052\231\053\227\054\200" +
    "\055\212\077\221\100\207\107\017\001\002\000\004\002" +
    "\ufffa\001\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0686\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\013\005\015\006\011\007\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\026\005\015\006\011\007" +
    "\021\001\001\000\012\003\025\005\015\006\011\007\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\051\011\035\012\034\013\043\047\050" +
    "\050\041\051\040\001\001\000\012\003\032\005\015\006" +
    "\011\007\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\115\001\001\000\004\014\146" +
    "\001\001\000\002\001\001\000\004\015\105\001\001\000" +
    "\020\010\143\011\035\012\034\013\141\047\050\050\041" +
    "\051\140\001\001\000\002\001\001\000\016\012\034\013" +
    "\074\014\077\015\072\050\041\051\073\001\001\000\012" +
    "\012\034\013\063\050\041\051\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\057\047\050\001\001" +
    "\000\006\011\056\047\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\115\001\001\000" +
    "\004\015\105\001\001\000\002\001\001\000\012\012\034" +
    "\013\134\050\041\051\133\001\001\000\002\001\001\000" +
    "\016\012\034\013\074\014\077\015\072\050\041\051\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\034\013\132\050\041\051\062\001\001\000\004\016\115" +
    "\001\001\000\004\015\105\001\001\000\016\012\034\013" +
    "\074\014\077\015\072\050\041\051\073\001\001\000\002" +
    "\001\001\000\004\050\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\034\013\110" +
    "\050\041\051\062\001\001\000\002\001\001\000\012\012" +
    "\034\013\106\050\041\051\062\001\001\000\004\015\105" +
    "\001\001\000\016\012\034\013\074\014\077\015\072\050" +
    "\041\051\073\001\001\000\004\015\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\041\051\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\077\050" +
    "\041\051\130\001\001\000\002\001\001\000\006\050\041" +
    "\051\125\001\001\000\010\014\077\050\041\051\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\105\001" +
    "\001\000\004\016\115\001\001\000\004\015\105\001\001" +
    "\000\016\012\034\013\074\014\077\015\072\050\041\051" +
    "\073\001\001\000\012\012\034\013\110\050\041\051\062" +
    "\001\001\000\002\001\001\000\004\016\115\001\001\000" +
    "\004\015\105\001\001\000\016\012\034\013\074\014\077" +
    "\015\072\050\041\051\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\151\001\001\000\006\050\041" +
    "\051\150\001\001\000\010\014\077\050\041\051\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\156" +
    "\011\035\012\034\013\043\047\050\050\041\051\040\001" +
    "\001\000\020\010\155\011\035\012\034\013\043\047\050" +
    "\050\041\051\040\001\001\000\016\012\034\013\074\014" +
    "\077\015\072\050\041\051\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\165\005\015\006\011\007\021" +
    "\001\001\000\012\003\164\005\015\006\011\007\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\167" +
    "\005\015\006\011\007\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\004\202\005\205\006\173\007\232" +
    "\020\224\021\217\022\240\023\172\024\235\030\225\031" +
    "\233\033\201\034\174\035\236\036\200\037\203\040\210" +
    "\041\176\042\234\043\231\044\221\045\215\052\175\053" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0645\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\373\005\205" +
    "\006\173\007\232\020\224\021\217\022\240\023\172\024" +
    "\235\030\225\031\233\033\201\034\174\035\236\036\200" +
    "\037\203\040\210\041\176\042\234\043\231\044\221\045" +
    "\215\052\175\053\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\251\047\050\001\001\000\002" +
    "\001\001\000\006\011\253\047\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\266\047\050\001\001\000\002\001\001\000\006\011" +
    "\270\047\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\300\047\050" +
    "\001\001\000\002\001\001\000\006\011\302\047\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\312\047\050\001\001\000\002" +
    "\001\001\000\006\011\314\047\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\345" +
    "\047\050\001\001\000\006\011\322\047\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\336\047\050" +
    "\001\001\000\006\011\325\047\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\342\047\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\347\047\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\354\047\050\001\001\000\002\001" +
    "\001\000\006\011\356\047\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\366\047\050\001\001\000\002\001\001\000\006\011" +
    "\370\047\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\u0131\026\u012f\047\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\u0131" +
    "\026\u0138\047\050\001\001\000\010\011\u0131\026\u0134\047" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\u0131\026\u0137\047\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\u013e\047\050\001" +
    "\001\000\002\001\001\000\006\011\u0140\047\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\u0131\026\u0157\047\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\u0131" +
    "\026\u015f\047\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\u0131\026\u016d\047\050" +
    "\001\001\000\010\011\u0131\026\u0164\047\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\u0131\026\u0172\047\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u017f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u018c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u0198\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u01b3\001\001\000\004" +
    "\025\u01a0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u01ba\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\u01c2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u01cc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\034\013\u01e4\050\041\051\062\001" +
    "\001\000\012\012\034\013\u01d3\050\041\051\062\001\001" +
    "\000\004\015\105\001\001\000\012\012\034\013\110\050" +
    "\041\051\062\001\001\000\002\001\001\000\062\005\205" +
    "\006\173\007\232\017\u01dd\020\224\021\217\022\240\023" +
    "\172\024\235\030\225\031\u01db\033\201\034\174\035\236" +
    "\036\200\037\203\040\210\041\176\042\234\043\231\044" +
    "\221\045\215\052\175\053\204\001\001\000\062\005\205" +
    "\006\173\007\232\017\u01da\020\224\021\217\022\240\023" +
    "\172\024\235\030\225\031\u01db\033\201\034\174\035\236" +
    "\036\200\037\203\040\210\041\176\042\234\043\231\044" +
    "\221\045\215\052\175\053\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\005\205\006" +
    "\173\007\232\017\u01dc\020\224\021\217\022\240\023\172" +
    "\024\235\030\225\031\u01db\033\201\034\174\035\236\036" +
    "\200\037\203\040\210\041\176\042\234\043\231\044\221" +
    "\045\215\052\175\053\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\005\205\006\173\007\232\017\u01e1\020\224\021\217\022" +
    "\240\023\172\024\235\030\225\031\u01db\033\201\034\174" +
    "\035\236\036\200\037\203\040\210\041\176\042\234\043" +
    "\231\044\221\045\215\052\175\053\204\001\001\000\002" +
    "\001\001\000\062\005\205\006\173\007\232\017\u01e3\020" +
    "\224\021\217\022\240\023\172\024\235\030\225\031\u01db" +
    "\033\201\034\174\035\236\036\200\037\203\040\210\041" +
    "\176\042\234\043\231\044\221\045\215\052\175\053\204" +
    "\001\001\000\002\001\001\000\004\015\105\001\001\000" +
    "\002\001\001\000\062\005\205\006\173\007\232\017\u01e7" +
    "\020\224\021\217\022\240\023\172\024\235\030\225\031" +
    "\u01db\033\201\034\174\035\236\036\200\037\203\040\210" +
    "\041\176\042\234\043\231\044\221\045\215\052\175\053" +
    "\204\001\001\000\002\001\001\000\012\012\034\013\u01f2" +
    "\050\041\051\062\001\001\000\012\012\034\013\u01ea\050" +
    "\041\051\062\001\001\000\004\015\105\001\001\000\072" +
    "\005\205\006\173\007\232\012\034\013\110\017\u01f0\020" +
    "\224\021\217\022\240\023\172\024\235\030\225\031\u01db" +
    "\033\201\034\174\035\236\036\200\037\203\040\210\041" +
    "\176\042\234\043\231\044\221\045\215\050\041\051\062" +
    "\052\175\053\204\001\001\000\062\005\205\006\173\007" +
    "\232\017\u01ed\020\224\021\217\022\240\023\172\024\235" +
    "\030\225\031\u01db\033\201\034\174\035\236\036\200\037" +
    "\203\040\210\041\176\042\234\043\231\044\221\045\215" +
    "\052\175\053\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\034\013\074\014\077\015\072\050\041" +
    "\051\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\105\001\001\000\062\005\205\006\173\007\232" +
    "\017\u01f4\020\224\021\217\022\240\023\172\024\235\030" +
    "\225\031\u01db\033\201\034\174\035\236\036\200\037\203" +
    "\040\210\041\176\042\234\043\231\044\221\045\215\052" +
    "\175\053\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u0280\001\001\000\004" +
    "\046\u027e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u0283\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\u028b\050\041\051\u028c\001\001\000\010\014\077\050" +
    "\041\051\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\041\051\u05c2\001\001\000\006\050\041\051" +
    "\u0290\001\001\000\010\014\077\050\041\051\130\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0577\001\001\000" +
    "\006\050\041\051\u0294\001\001\000\010\014\077\050\041" +
    "\051\130\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0530\001\001\000\006\050\041\051\u0298\001\001\000\010" +
    "\014\077\050\041\051\130\001\001\000\002\001\001\000" +
    "\006\050\041\051\u04ed\001\001\000\006\050\041\051\u029c" +
    "\001\001\000\010\014\077\050\041\051\130\001\001\000" +
    "\002\001\001\000\006\050\041\051\u04ae\001\001\000\006" +
    "\050\041\051\u02a0\001\001\000\010\014\077\050\041\051" +
    "\130\001\001\000\002\001\001\000\006\050\041\051\u0473" +
    "\001\001\000\006\050\041\051\u02a4\001\001\000\010\014" +
    "\077\050\041\051\130\001\001\000\002\001\001\000\006" +
    "\050\041\051\u043c\001\001\000\006\050\041\051\u02a8\001" +
    "\001\000\010\014\077\050\041\051\130\001\001\000\002" +
    "\001\001\000\006\050\041\051\u0409\001\001\000\006\050" +
    "\041\051\u02ac\001\001\000\010\014\077\050\041\051\130" +
    "\001\001\000\002\001\001\000\006\050\041\051\u03da\001" +
    "\001\000\006\050\041\051\u02b0\001\001\000\010\014\077" +
    "\050\041\051\130\001\001\000\002\001\001\000\006\050" +
    "\041\051\u03af\001\001\000\006\050\041\051\u02b4\001\001" +
    "\000\010\014\077\050\041\051\130\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0388\001\001\000\006\050\041" +
    "\051\u02b8\001\001\000\010\014\077\050\041\051\130\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0365\001\001" +
    "\000\006\050\041\051\u02bc\001\001\000\010\014\077\050" +
    "\041\051\130\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0346\001\001\000\006\050\041\051\u02c0\001\001\000" +
    "\010\014\077\050\041\051\130\001\001\000\002\001\001" +
    "\000\006\050\041\051\u032b\001\001\000\006\050\041\051" +
    "\u02c4\001\001\000\010\014\077\050\041\051\130\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0314\001\001\000" +
    "\006\050\041\051\u02c8\001\001\000\010\014\077\050\041" +
    "\051\130\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0301\001\001\000\006\050\041\051\u02cc\001\001\000\010" +
    "\014\077\050\041\051\130\001\001\000\002\001\001\000" +
    "\006\050\041\051\u02f2\001\001\000\006\050\041\051\u02d0" +
    "\001\001\000\010\014\077\050\041\051\130\001\001\000" +
    "\002\001\001\000\006\050\041\051\u02e7\001\001\000\006" +
    "\050\041\051\u02d4\001\001\000\010\014\077\050\041\051" +
    "\130\001\001\000\002\001\001\000\006\050\041\051\u02e0" +
    "\001\001\000\006\050\041\051\u02d8\001\001\000\010\014" +
    "\077\050\041\051\130\001\001\000\002\001\001\000\006" +
    "\050\041\051\u02dd\001\001\000\006\050\041\051\u02dc\001" +
    "\001\000\010\014\077\050\041\051\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\041\051\u02df\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\041" +
    "\051\u02e2\001\001\000\002\001\001\000\006\050\041\051" +
    "\u02e4\001\001\000\002\001\001\000\006\050\041\051\u02e6" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\050" +
    "\041\051\u02e9\001\001\000\002\001\001\000\006\050\041" +
    "\051\u02eb\001\001\000\002\001\001\000\006\050\041\051" +
    "\u02ed\001\001\000\002\001\001\000\006\050\041\051\u02ef" +
    "\001\001\000\002\001\001\000\006\050\041\051\u02f1\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\041" +
    "\051\u02f4\001\001\000\002\001\001\000\006\050\041\051" +
    "\u02f6\001\001\000\002\001\001\000\006\050\041\051\u02f8" +
    "\001\001\000\002\001\001\000\006\050\041\051\u02fa\001" +
    "\001\000\002\001\001\000\006\050\041\051\u02fc\001\001" +
    "\000\002\001\001\000\006\050\041\051\u02fe\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0300\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0303\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0305\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0307\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0309\001\001\000\002" +
    "\001\001\000\006\050\041\051\u030b\001\001\000\002\001" +
    "\001\000\006\050\041\051\u030d\001\001\000\002\001\001" +
    "\000\006\050\041\051\u030f\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0311\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0313\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0316\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0318\001\001\000\002\001\001\000" +
    "\006\050\041\051\u031a\001\001\000\002\001\001\000\006" +
    "\050\041\051\u031c\001\001\000\002\001\001\000\006\050" +
    "\041\051\u031e\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0320\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0322\001\001\000\002\001\001\000\006\050\041\051\u0324" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0326\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0328\001\001" +
    "\000\002\001\001\000\006\050\041\051\u032a\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\041\051\u032d" +
    "\001\001\000\002\001\001\000\006\050\041\051\u032f\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0331\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0333\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0335\001\001\000\002" +
    "\001\001\000\006\050\041\051\u0337\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0339\001\001\000\002\001\001" +
    "\000\006\050\041\051\u033b\001\001\000\002\001\001\000" +
    "\006\050\041\051\u033d\001\001\000\002\001\001\000\006" +
    "\050\041\051\u033f\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0341\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0343\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0345\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0348\001\001\000\002\001\001\000\006\050" +
    "\041\051\u034a\001\001\000\002\001\001\000\006\050\041" +
    "\051\u034c\001\001\000\002\001\001\000\006\050\041\051" +
    "\u034e\001\001\000\002\001\001\000\006\050\041\051\u0350" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0352\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0354\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0356\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0358\001\001\000\002" +
    "\001\001\000\006\050\041\051\u035a\001\001\000\002\001" +
    "\001\000\006\050\041\051\u035c\001\001\000\002\001\001" +
    "\000\006\050\041\051\u035e\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0360\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0362\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0364\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0367\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0369\001\001\000\002\001\001\000\006" +
    "\050\041\051\u036b\001\001\000\002\001\001\000\006\050" +
    "\041\051\u036d\001\001\000\002\001\001\000\006\050\041" +
    "\051\u036f\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0371\001\001\000\002\001\001\000\006\050\041\051\u0373" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0375\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0377\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0379\001\001\000" +
    "\002\001\001\000\006\050\041\051\u037b\001\001\000\002" +
    "\001\001\000\006\050\041\051\u037d\001\001\000\002\001" +
    "\001\000\006\050\041\051\u037f\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0381\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0383\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0385\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0387\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\041\051\u038a\001\001\000\002\001\001\000" +
    "\006\050\041\051\u038c\001\001\000\002\001\001\000\006" +
    "\050\041\051\u038e\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0390\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0392\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0394\001\001\000\002\001\001\000\006\050\041\051\u0396" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0398\001" +
    "\001\000\002\001\001\000\006\050\041\051\u039a\001\001" +
    "\000\002\001\001\000\006\050\041\051\u039c\001\001\000" +
    "\002\001\001\000\006\050\041\051\u039e\001\001\000\002" +
    "\001\001\000\006\050\041\051\u03a0\001\001\000\002\001" +
    "\001\000\006\050\041\051\u03a2\001\001\000\002\001\001" +
    "\000\006\050\041\051\u03a4\001\001\000\002\001\001\000" +
    "\006\050\041\051\u03a6\001\001\000\002\001\001\000\006" +
    "\050\041\051\u03a8\001\001\000\002\001\001\000\006\050" +
    "\041\051\u03aa\001\001\000\002\001\001\000\006\050\041" +
    "\051\u03ac\001\001\000\002\001\001\000\006\050\041\051" +
    "\u03ae\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\041\051\u03b1\001\001\000\002\001\001\000\006\050" +
    "\041\051\u03b3\001\001\000\002\001\001\000\006\050\041" +
    "\051\u03b5\001\001\000\002\001\001\000\006\050\041\051" +
    "\u03b7\001\001\000\002\001\001\000\006\050\041\051\u03b9" +
    "\001\001\000\002\001\001\000\006\050\041\051\u03bb\001" +
    "\001\000\002\001\001\000\006\050\041\051\u03bd\001\001" +
    "\000\002\001\001\000\006\050\041\051\u03bf\001\001\000" +
    "\002\001\001\000\006\050\041\051\u03c1\001\001\000\002" +
    "\001\001\000\006\050\041\051\u03c3\001\001\000\002\001" +
    "\001\000\006\050\041\051\u03c5\001\001\000\002\001\001" +
    "\000\006\050\041\051\u03c7\001\001\000\002\001\001\000" +
    "\006\050\041\051\u03c9\001\001\000\002\001\001\000\006" +
    "\050\041\051\u03cb\001\001\000\002\001\001\000\006\050" +
    "\041\051\u03cd\001\001\000\002\001\001\000\006\050\041" +
    "\051\u03cf\001\001\000\002\001\001\000\006\050\041\051" +
    "\u03d1\001\001\000\002\001\001\000\006\050\041\051\u03d3" +
    "\001\001\000\002\001\001\000\006\050\041\051\u03d5\001" +
    "\001\000\002\001\001\000\006\050\041\051\u03d7\001\001" +
    "\000\002\001\001\000\006\050\041\051\u03d9\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\041\051\u03dc" +
    "\001\001\000\002\001\001\000\006\050\041\051\u03de\001" +
    "\001\000\002\001\001\000\006\050\041\051\u03e0\001\001" +
    "\000\002\001\001\000\006\050\041\051\u03e2\001\001\000" +
    "\002\001\001\000\006\050\041\051\u03e4\001\001\000\002" +
    "\001\001\000\006\050\041\051\u03e6\001\001\000\002\001" +
    "\001\000\006\050\041\051\u03e8\001\001\000\002\001\001" +
    "\000\006\050\041\051\u03ea\001\001\000\002\001\001\000" +
    "\006\050\041\051\u03ec\001\001\000\002\001\001\000\006" +
    "\050\041\051\u03ee\001\001\000\002\001\001\000\006\050" +
    "\041\051\u03f0\001\001\000\002\001\001\000\006\050\041" +
    "\051\u03f2\001\001\000\002\001\001\000\006\050\041\051" +
    "\u03f4\001\001\000\002\001\001\000\006\050\041\051\u03f6" +
    "\001\001\000\002\001\001\000\006\050\041\051\u03f8\001" +
    "\001\000\002\001\001\000\006\050\041\051\u03fa\001\001" +
    "\000\002\001\001\000\006\050\041\051\u03fc\001\001\000" +
    "\002\001\001\000\006\050\041\051\u03fe\001\001\000\002" +
    "\001\001\000\006\050\041\051\u0400\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0402\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0404\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0406\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0408\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\041\051\u040b\001\001\000\002\001\001" +
    "\000\006\050\041\051\u040d\001\001\000\002\001\001\000" +
    "\006\050\041\051\u040f\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0411\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0413\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0415\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0417\001\001\000\002\001\001\000\006\050\041\051\u0419" +
    "\001\001\000\002\001\001\000\006\050\041\051\u041b\001" +
    "\001\000\002\001\001\000\006\050\041\051\u041d\001\001" +
    "\000\002\001\001\000\006\050\041\051\u041f\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0421\001\001\000\002" +
    "\001\001\000\006\050\041\051\u0423\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0425\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0427\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0429\001\001\000\002\001\001\000\006" +
    "\050\041\051\u042b\001\001\000\002\001\001\000\006\050" +
    "\041\051\u042d\001\001\000\002\001\001\000\006\050\041" +
    "\051\u042f\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0431\001\001\000\002\001\001\000\006\050\041\051\u0433" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0435\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0437\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0439\001\001\000" +
    "\002\001\001\000\006\050\041\051\u043b\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\041\051\u043e\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0440\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0442\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0444\001\001\000\002" +
    "\001\001\000\006\050\041\051\u0446\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0448\001\001\000\002\001\001" +
    "\000\006\050\041\051\u044a\001\001\000\002\001\001\000" +
    "\006\050\041\051\u044c\001\001\000\002\001\001\000\006" +
    "\050\041\051\u044e\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0450\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0452\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0454\001\001\000\002\001\001\000\006\050\041\051\u0456" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0458\001" +
    "\001\000\002\001\001\000\006\050\041\051\u045a\001\001" +
    "\000\002\001\001\000\006\050\041\051\u045c\001\001\000" +
    "\002\001\001\000\006\050\041\051\u045e\001\001\000\002" +
    "\001\001\000\006\050\041\051\u0460\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0462\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0464\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0466\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0468\001\001\000\002\001\001\000\006\050" +
    "\041\051\u046a\001\001\000\002\001\001\000\006\050\041" +
    "\051\u046c\001\001\000\002\001\001\000\006\050\041\051" +
    "\u046e\001\001\000\002\001\001\000\006\050\041\051\u0470" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0472\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0475\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0477\001\001\000\002\001\001\000\006\050\041\051\u0479" +
    "\001\001\000\002\001\001\000\006\050\041\051\u047b\001" +
    "\001\000\002\001\001\000\006\050\041\051\u047d\001\001" +
    "\000\002\001\001\000\006\050\041\051\u047f\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0481\001\001\000\002" +
    "\001\001\000\006\050\041\051\u0483\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0485\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0487\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0489\001\001\000\002\001\001\000\006" +
    "\050\041\051\u048b\001\001\000\002\001\001\000\006\050" +
    "\041\051\u048d\001\001\000\002\001\001\000\006\050\041" +
    "\051\u048f\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0491\001\001\000\002\001\001\000\006\050\041\051\u0493" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0495\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0497\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0499\001\001\000" +
    "\002\001\001\000\006\050\041\051\u049b\001\001\000\002" +
    "\001\001\000\006\050\041\051\u049d\001\001\000\002\001" +
    "\001\000\006\050\041\051\u049f\001\001\000\002\001\001" +
    "\000\006\050\041\051\u04a1\001\001\000\002\001\001\000" +
    "\006\050\041\051\u04a3\001\001\000\002\001\001\000\006" +
    "\050\041\051\u04a5\001\001\000\002\001\001\000\006\050" +
    "\041\051\u04a7\001\001\000\002\001\001\000\006\050\041" +
    "\051\u04a9\001\001\000\002\001\001\000\006\050\041\051" +
    "\u04ab\001\001\000\002\001\001\000\006\050\041\051\u04ad" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\050" +
    "\041\051\u04b0\001\001\000\002\001\001\000\006\050\041" +
    "\051\u04b2\001\001\000\002\001\001\000\006\050\041\051" +
    "\u04b4\001\001\000\002\001\001\000\006\050\041\051\u04b6" +
    "\001\001\000\002\001\001\000\006\050\041\051\u04b8\001" +
    "\001\000\002\001\001\000\006\050\041\051\u04ba\001\001" +
    "\000\002\001\001\000\006\050\041\051\u04bc\001\001\000" +
    "\002\001\001\000\006\050\041\051\u04be\001\001\000\002" +
    "\001\001\000\006\050\041\051\u04c0\001\001\000\002\001" +
    "\001\000\006\050\041\051\u04c2\001\001\000\002\001\001" +
    "\000\006\050\041\051\u04c4\001\001\000\002\001\001\000" +
    "\006\050\041\051\u04c6\001\001\000\002\001\001\000\006" +
    "\050\041\051\u04c8\001\001\000\002\001\001\000\006\050" +
    "\041\051\u04ca\001\001\000\002\001\001\000\006\050\041" +
    "\051\u04cc\001\001\000\002\001\001\000\006\050\041\051" +
    "\u04ce\001\001\000\002\001\001\000\006\050\041\051\u04d0" +
    "\001\001\000\002\001\001\000\006\050\041\051\u04d2\001" +
    "\001\000\002\001\001\000\006\050\041\051\u04d4\001\001" +
    "\000\002\001\001\000\006\050\041\051\u04d6\001\001\000" +
    "\002\001\001\000\006\050\041\051\u04d8\001\001\000\002" +
    "\001\001\000\006\050\041\051\u04da\001\001\000\002\001" +
    "\001\000\006\050\041\051\u04dc\001\001\000\002\001\001" +
    "\000\006\050\041\051\u04de\001\001\000\002\001\001\000" +
    "\006\050\041\051\u04e0\001\001\000\002\001\001\000\006" +
    "\050\041\051\u04e2\001\001\000\002\001\001\000\006\050" +
    "\041\051\u04e4\001\001\000\002\001\001\000\006\050\041" +
    "\051\u04e6\001\001\000\002\001\001\000\006\050\041\051" +
    "\u04e8\001\001\000\002\001\001\000\006\050\041\051\u04ea" +
    "\001\001\000\002\001\001\000\006\050\041\051\u04ec\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\041" +
    "\051\u04ef\001\001\000\002\001\001\000\006\050\041\051" +
    "\u04f1\001\001\000\002\001\001\000\006\050\041\051\u04f3" +
    "\001\001\000\002\001\001\000\006\050\041\051\u04f5\001" +
    "\001\000\002\001\001\000\006\050\041\051\u04f7\001\001" +
    "\000\002\001\001\000\006\050\041\051\u04f9\001\001\000" +
    "\002\001\001\000\006\050\041\051\u04fb\001\001\000\002" +
    "\001\001\000\006\050\041\051\u04fd\001\001\000\002\001" +
    "\001\000\006\050\041\051\u04ff\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0501\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0503\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0505\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0507\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0509\001\001\000\002\001\001\000\006\050\041\051" +
    "\u050b\001\001\000\002\001\001\000\006\050\041\051\u050d" +
    "\001\001\000\002\001\001\000\006\050\041\051\u050f\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0511\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0513\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0515\001\001\000\002" +
    "\001\001\000\006\050\041\051\u0517\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0519\001\001\000\002\001\001" +
    "\000\006\050\041\051\u051b\001\001\000\002\001\001\000" +
    "\006\050\041\051\u051d\001\001\000\002\001\001\000\006" +
    "\050\041\051\u051f\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0521\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0523\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0525\001\001\000\002\001\001\000\006\050\041\051\u0527" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0529\001" +
    "\001\000\002\001\001\000\006\050\041\051\u052b\001\001" +
    "\000\002\001\001\000\006\050\041\051\u052d\001\001\000" +
    "\002\001\001\000\006\050\041\051\u052f\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0532\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0534\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0536\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0538\001\001\000\002" +
    "\001\001\000\006\050\041\051\u053a\001\001\000\002\001" +
    "\001\000\006\050\041\051\u053c\001\001\000\002\001\001" +
    "\000\006\050\041\051\u053e\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0540\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0542\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0544\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0546\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0548\001\001\000\002\001\001\000\006\050\041\051\u054a" +
    "\001\001\000\002\001\001\000\006\050\041\051\u054c\001" +
    "\001\000\002\001\001\000\006\050\041\051\u054e\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0550\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0552\001\001\000\002" +
    "\001\001\000\006\050\041\051\u0554\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0556\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0558\001\001\000\002\001\001\000" +
    "\006\050\041\051\u055a\001\001\000\002\001\001\000\006" +
    "\050\041\051\u055c\001\001\000\002\001\001\000\006\050" +
    "\041\051\u055e\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0560\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0562\001\001\000\002\001\001\000\006\050\041\051\u0564" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0566\001" +
    "\001\000\002\001\001\000\006\050\041\051\u0568\001\001" +
    "\000\002\001\001\000\006\050\041\051\u056a\001\001\000" +
    "\002\001\001\000\006\050\041\051\u056c\001\001\000\002" +
    "\001\001\000\006\050\041\051\u056e\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0570\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0572\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0574\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0576\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0579\001\001\000\002\001\001" +
    "\000\006\050\041\051\u057b\001\001\000\002\001\001\000" +
    "\006\050\041\051\u057d\001\001\000\002\001\001\000\006" +
    "\050\041\051\u057f\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0581\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0583\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0585\001\001\000\002\001\001\000\006\050\041\051\u0587" +
    "\001\001\000\002\001\001\000\006\050\041\051\u0589\001" +
    "\001\000\002\001\001\000\006\050\041\051\u058b\001\001" +
    "\000\002\001\001\000\006\050\041\051\u058d\001\001\000" +
    "\002\001\001\000\006\050\041\051\u058f\001\001\000\002" +
    "\001\001\000\006\050\041\051\u0591\001\001\000\002\001" +
    "\001\000\006\050\041\051\u0593\001\001\000\002\001\001" +
    "\000\006\050\041\051\u0595\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0597\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0599\001\001\000\002\001\001\000\006\050" +
    "\041\051\u059b\001\001\000\002\001\001\000\006\050\041" +
    "\051\u059d\001\001\000\002\001\001\000\006\050\041\051" +
    "\u059f\001\001\000\002\001\001\000\006\050\041\051\u05a1" +
    "\001\001\000\002\001\001\000\006\050\041\051\u05a3\001" +
    "\001\000\002\001\001\000\006\050\041\051\u05a5\001\001" +
    "\000\002\001\001\000\006\050\041\051\u05a7\001\001\000" +
    "\002\001\001\000\006\050\041\051\u05a9\001\001\000\002" +
    "\001\001\000\006\050\041\051\u05ab\001\001\000\002\001" +
    "\001\000\006\050\041\051\u05ad\001\001\000\002\001\001" +
    "\000\006\050\041\051\u05af\001\001\000\002\001\001\000" +
    "\006\050\041\051\u05b1\001\001\000\002\001\001\000\006" +
    "\050\041\051\u05b3\001\001\000\002\001\001\000\006\050" +
    "\041\051\u05b5\001\001\000\002\001\001\000\006\050\041" +
    "\051\u05b7\001\001\000\002\001\001\000\006\050\041\051" +
    "\u05b9\001\001\000\002\001\001\000\006\050\041\051\u05bb" +
    "\001\001\000\002\001\001\000\006\050\041\051\u05bd\001" +
    "\001\000\002\001\001\000\006\050\041\051\u05bf\001\001" +
    "\000\002\001\001\000\006\050\041\051\u05c1\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\041\051\u05c4" +
    "\001\001\000\002\001\001\000\006\050\041\051\u05c6\001" +
    "\001\000\002\001\001\000\006\050\041\051\u05c8\001\001" +
    "\000\002\001\001\000\006\050\041\051\u05ca\001\001\000" +
    "\002\001\001\000\006\050\041\051\u05cc\001\001\000\002" +
    "\001\001\000\006\050\041\051\u05ce\001\001\000\002\001" +
    "\001\000\006\050\041\051\u05d0\001\001\000\002\001\001" +
    "\000\006\050\041\051\u05d2\001\001\000\002\001\001\000" +
    "\006\050\041\051\u05d4\001\001\000\002\001\001\000\006" +
    "\050\041\051\u05d6\001\001\000\002\001\001\000\006\050" +
    "\041\051\u05d8\001\001\000\002\001\001\000\006\050\041" +
    "\051\u05da\001\001\000\002\001\001\000\006\050\041\051" +
    "\u05dc\001\001\000\002\001\001\000\006\050\041\051\u05de" +
    "\001\001\000\002\001\001\000\006\050\041\051\u05e0\001" +
    "\001\000\002\001\001\000\006\050\041\051\u05e2\001\001" +
    "\000\002\001\001\000\006\050\041\051\u05e4\001\001\000" +
    "\002\001\001\000\006\050\041\051\u05e6\001\001\000\002" +
    "\001\001\000\006\050\041\051\u05e8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\041" +
    "\051\u05ec\001\001\000\002\001\001\000\006\050\041\051" +
    "\u05ee\001\001\000\002\001\001\000\006\050\041\051\u05f0" +
    "\001\001\000\002\001\001\000\006\050\041\051\u05f2\001" +
    "\001\000\002\001\001\000\006\050\041\051\u05f4\001\001" +
    "\000\002\001\001\000\006\050\041\051\u05f6\001\001\000" +
    "\002\001\001\000\006\050\041\051\u05f8\001\001\000\002" +
    "\001\001\000\006\050\041\051\u05fa\001\001\000\002\001" +
    "\001\000\006\050\041\051\u05fc\001\001\000\002\001\001" +
    "\000\006\050\041\051\u05fe\001\001\000\002\001\001\000" +
    "\006\050\041\051\u0600\001\001\000\002\001\001\000\006" +
    "\050\041\051\u0602\001\001\000\002\001\001\000\006\050" +
    "\041\051\u0604\001\001\000\002\001\001\000\006\050\041" +
    "\051\u0606\001\001\000\002\001\001\000\006\050\041\051" +
    "\u0608\001\001\000\002\001\001\000\006\050\041\051\u060a" +
    "\001\001\000\002\001\001\000\006\050\041\051\u060c\001" +
    "\001\000\002\001\001\000\006\050\041\051\u060e\001\001" +
    "\000\002\001\001\000\006\050\041\051\u0610\001\001\000" +
    "\002\001\001\000\006\050\041\051\u0612\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\027\u0619" +
    "\050\041\051\u028c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\u0629\050\041\051\u028c\001\001\000\010\027" +
    "\u0621\050\041\051\u028c\001\001\000\010\014\077\050\041" +
    "\051\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\027\u062d" +
    "\050\041\051\u028c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\u0633\050\041\051\u028c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u0641" +
    "\047\050\001\001\000\006\011\u0638\047\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\u0669\005\015\006\011\007\021\001\001" +
    "\000\012\003\u0668\005\015\006\011\007\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\u066b\005\015" +
    "\006\011\007\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\004\u066e\005\205\006\173\007\232\020\224" +
    "\021\217\022\240\023\172\024\235\030\225\031\233\033" +
    "\201\034\174\035\236\036\200\037\203\040\210\041\176" +
    "\042\234\043\231\044\221\045\215\052\175\053\204\001" +
    "\001\000\002\001\001\000\012\003\u067a\005\015\006\011" +
    "\007\021\001\001\000\012\003\u0671\005\015\006\011\007" +
    "\021\001\001\000\002\001\001\000\012\003\u0673\005\015" +
    "\006\011\007\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\004\u0676\005\205\006\173\007\232\020\224" +
    "\021\217\022\240\023\172\024\235\030\225\031\233\033" +
    "\201\034\174\035\236\036\200\037\203\040\210\041\176" +
    "\042\234\043\231\044\221\045\215\052\175\053\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\u0679" +
    "\005\205\006\173\007\232\020\224\021\217\022\240\023" +
    "\172\024\235\030\225\031\233\033\201\034\174\035\236" +
    "\036\200\037\203\040\210\041\176\042\234\043\231\044" +
    "\221\045\215\052\175\053\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\u0682\005\205\006\173\007\232\020\224\021\217" +
    "\022\240\023\172\024\235\030\225\031\233\033\201\034" +
    "\174\035\236\036\200\037\203\040\210\041\176\042\234" +
    "\043\231\044\221\045\215\052\175\053\204\001\001\000" +
    "\062\004\u067f\005\205\006\173\007\232\020\224\021\217" +
    "\022\240\023\172\024\235\030\225\031\233\033\201\034" +
    "\174\035\236\036\200\037\203\040\210\041\176\042\234" +
    "\043\231\044\221\045\215\052\175\053\204\001\001\000" +
    "\002\001\001\000\062\004\u0681\005\205\006\173\007\232" +
    "\020\224\021\217\022\240\023\172\024\235\030\225\031" +
    "\233\033\201\034\174\035\236\036\200\037\203\040\210" +
    "\041\176\042\234\043\231\044\221\045\215\052\175\053" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\004\u0687\005\205\006\173\007\232\020\224\021\217\022" +
    "\240\023\172\024\235\030\225\031\233\033\201\034\174" +
    "\035\236\036\200\037\203\040\210\041\176\042\234\043" +
    "\231\044\221\045\215\052\175\053\204\001\001\000\002" +
    "\001\001\000\062\004\u0686\005\205\006\173\007\232\020" +
    "\224\021\217\022\240\023\172\024\235\030\225\031\233" +
    "\033\201\034\174\035\236\036\200\037\203\040\210\041" +
    "\176\042\234\043\231\044\221\045\215\052\175\053\204" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Asintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Asintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Asintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    boolean esDAssig=false;

    public Asintactico(java_cup.runtime.Scanner s,ArrayList<Error1> m) {super(s); ManejadorDeErrores =m; }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontró ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Asintactico$actions {


void print(String msj)
   {System.out.println(msj);}

  private final Asintactico parser;

  /** Constructor */
  CUP$Asintactico$actions(Asintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action_part00000000(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Asintactico$result;

      /* select the action based on the action number */
      switch (CUP$Asintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BEGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		RESULT = start_val;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Asintactico$parser.done_parsing();
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BEGIN ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"ERROR DE ERRORES . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BEGIN ::= error DECLARE CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected before DECLARE . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BEGIN ::= error CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected value 'DECLARE' Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BEGIN ::= DECLARE error CURLY_BR1 DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: value not expected after DECLARE . Line: . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BEGIN ::= DECLARE error DECLARE_BODY MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Curly Bracket expected ('{') after DECLARE . Line: . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY error MAIN CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected before MAIN  . Line: . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY error CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected value 'MAIN' Missing . Line: . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN error CURLY_BR1 MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: value not expected after MAIN  . Line: . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BEGIN ::= DECLARE CURLY_BR1 DECLARE_BODY MAIN error MAIN_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Curly Bracket expected ('{') after MAIN  . Line: . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARE_BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARE_BODY ::= DEC SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARE_BODY ::= DATA_TYPE ASSIG SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		
    if(parser.esDAssig){
        boolean insert = FCompiler.ts.insertar(parser.tipoActual+"");
        if (!(i.toString().equalsIgnoreCase(parser.tipoActual))){
            if(parser.tipoActual != null){
                    if(parser.esId){
                        String error = "Semantic error in line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+". Identifier: "+"\""+parser.salidaTipoActual+"\" has "+parser.tipoActual+" type. Type expected: "+ i +".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }else{
                        String error = "Semantic error in line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+". Found: "+"\""+parser.salidaTipoActual+"\", has a(n) "+parser.tipoActual+" value type. Value type expected: "+ i+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }
                    
                }
        }else{  
            if(insert){
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","tipo",i);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "linea", parser.fil);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "columna", parser.col);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","valor",parser.valorActual+"");
                System.out.println("Valores "+parser.tipoActual+". Fila: "+parser.fil+". Columna: "+parser.col+". Valor: "+parser.valorActual);
            }else{
                String error = "Semantic error in line: "+(ileft+1)+". Identifier:"+"\""+i+"\" is duplicated.";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
            }
        }
    }
    parser.esDAssig = false;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARE_BODY ::= ASSIG SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		
    if(parser.esDAssig){
        String error = "Semantic error in line: "+(parser.fil)+", column: "+parser.col+". Identifier: "+"\""+parser.tipoActual+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
    } else{
        System.out.println("NO SE QUE HACES AQUI XD");
    }
    parser.esDAssig = false;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARE_BODY ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  CURLY('}') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARE_BODY ::= error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARE_BODY ::= DEC error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  SEMICOLON (';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARE_BODY ::= DATA_TYPE error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Expected assignment statement. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARE_BODY ::= DATA_TYPE ASSIG error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON (';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARE_BODY ::= error SEMICOLON_SIGN DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARE_BODY ::= ASSIG error DECLARE_BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  SEMICOLON (';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY",1, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARE_BODY2 ::= DEC SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARE_BODY2 ::= ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;
		
    if(parser.esDAssig){
        String error = "Semantic error in line: "+(parser.fil)+", column: "+parser.col+". Identifier: "+"\""+parser.tipoActual+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
    } else{
        System.out.println("NO SE QUE HACES AQUI XD");
    }
    parser.esDAssig = false;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARE_BODY2 ::= DATA_TYPE ASSIG SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
    if(parser.esDAssig){
        boolean insert = FCompiler.ts.insertar(parser.tipoActual+"");
        if (!(i.toString().equalsIgnoreCase(parser.tipoActual))){
            if(parser.tipoActual != null){
                    if(parser.esId){
                        String error = "Semantic error in line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+". Identifier: "+"\""+parser.salidaTipoActual+"\" has "+parser.tipoActual+" type. Type expected: "+ i +".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }else{
                        String error = "Semantic error in line: "+Integer.parseInt(parser.fil)+", column: "+Integer.parseInt(parser.col)+". Found: "+"\""+parser.salidaTipoActual+"\", has a(n) "+parser.tipoActual+" value type. Value type expected: "+ i+".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
                    }
                    
                }
        }else{  
            if(insert){
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","tipo",i);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "linea", parser.fil);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"", "columna", parser.col);
                FCompiler.ts.actualizar(parser.salidaTipoActual+"","valor",parser.valorActual+"");
                System.out.println("Valores "+parser.tipoActual+". Fila: "+parser.fil+". Columna: "+parser.col+". Valor: "+parser.valorActual);
            }else{
                String error = "Semantic error in line: "+(ileft+1)+". Identifier:"+"\""+i+"\" is duplicated.";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",Integer.parseInt(parser.fil),Integer.parseInt(parser.col),error));
            }
        }
    }
    parser.esDAssig = false;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARE_BODY2 ::= error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARE_BODY2 ::= DEC error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON (';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARE_BODY2 ::= error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARE_BODY2 ::= ASSIG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON (';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARE_BODY2 ::= DATA_TYPE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Expected assignment statement. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARE_BODY2 ::= DATA_TYPE ASSIG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON (';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DECLARE_BODY2",40, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASSIG ::= ID ASSIG_OP EXP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    TSDatos datoEncontrado = FCompiler.ts.buscar(i+"");
        if(datoEncontrado != null ){
            if (!(datoEncontrado.tipo.equalsIgnoreCase(parser.tipoActual))){
                if(parser.salidaTipoActual != null){
                    if(parser.esId){
                        String error = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+parser.salidaTipoActual+"\" has "+parser.tipoActual+" type. Type expected: "+ datoEncontrado.tipo +".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
                    }else{
                        String error = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Found: "+"\""+parser.salidaTipoActual+"\", has a(n) "+parser.tipoActual+" value type. Value type expected: "+ datoEncontrado.tipo +".";
                        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
                    }
                    
                }
            }else{
                datoEncontrado.valor = e;
                System.out.println("Valor insertado es "+e);
            }
        
        }else{
            parser.valorActual = e;
            System.out.println("Valor insertado es "+e);
            parser.col = iright+"";
            parser.fil = (ileft+1)+"";
            if(parser.esId){
                parser.esDAssig = true;
            }  
           /*
           String error = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not declared.";
           parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));*/
        }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASSIG ::= error ASSIG_OP EXP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Identifier expected. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASSIG ::= ID error EXP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ASSIG('=') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASSIG ::= ID ASSIG_OP error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DATA_TYPE ::= STRING_WORD 
            {
              Object RESULT =null;
		 parser.tipoActual="STRING"; RESULT = parser.tipoActual;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DATA_TYPE ::= INT_WORD 
            {
              Object RESULT =null;
		 parser.tipoActual="INT"; RESULT = parser.tipoActual; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DATA_TYPE ::= BOOLEAN_WORD 
            {
              Object RESULT =null;
		 parser.tipoActual="BOOLEAN"; RESULT = parser.tipoActual;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DATA_TYPE ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Type Data expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",3, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		

        TSDatos datoEncontrado = FCompiler.ts.buscar(i+"");
        if(datoEncontrado != null){
            //SINTETIZAR TIPO
    
            parser.tipoActual = datoEncontrado.tipo;
            parser.salidaTipoActual = i;
            parser.esId = true;
            if(datoEncontrado.valor != null){
                RESULT = datoEncontrado.valor;
            }else{
                String error = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier:"+"\" "+i+"\" not initialized.";
                parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
            }
        }else{
            String error = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not declared.";
            parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,error));
        }
    

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= NUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        parser.tipoActual = "INT";    
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= TRUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        parser.tipoActual = "BOOLEAN";    
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= FALSE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        parser.tipoActual = "BOOLEAN";    
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= STRINGVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        parser.tipoActual = "STRING";    
        parser.salidaTipoActual = i+"";
        parser.esId = false;
        RESULT = i; 

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        RESULT = (int) e1;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= PARENTH1 EXP PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		
        //SINTETIZAR TIPO
        RESULT = i; 

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= COND 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        //SINTETIZAR TIPO
        RESULT = i; 

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  EXPRESSION Missing PRUEBA. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRINGVAL ::= STRINGVALAUX 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    if(s1!=null){
        RESULT=s1.toString();
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRINGVAL ::= STRINGVALAUX ADD_OP STRINGVAL 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    if(s1!=null && s2 !=null){
        RESULT=s1.toString()+s2.toString();
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRINGVAL ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  VALUE Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRINGVAL ::= STRINGVALAUX error STRINGVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  OPERATOR('+') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVAL",7, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRINGVALAUX ::= STRING 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
String sincomillas= f.replace('"',' ');
sincomillas=sincomillas.replaceAll(" ","");
RESULT=sincomillas; 
parser.valorActual= f;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRINGVALAUX ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("String")){
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*FALTA METER EL VALOR A LA TABLA DE SIMBOLOS PARA YA PODER MANDARSELO SINTENTIZADAMENTE*/
          if(identificador.valor != null){
              parser.valorActual=identificador.valor.toString();
               parser.valorActual=identificador.valor;
               RESULT=identificador.valor;
               /*PENDIENTE PARA QUE QUEDE BIEN CUANDO SE LE AGREGA EL VALOR*/
           }else{
              String valorNulo = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not initialized.";
              parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,valorNulo));
            }
        }else{
        String TipoError = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" is not STRING type. Expected: STRING type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }


              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRINGVALAUX ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  VALUE STRING Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("STRINGVALAUX",37, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BOOLEANVAL ::= TRUE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT=f; parser.valorActual=f; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BOOLEANVAL ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT=f; parser.valorActual=f; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BOOLEANVAL ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Boolean")){
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          if(identificador.valor != null){
              parser.valorActual=identificador.valor.toString();
               parser.valorActual=identificador.valor;
               RESULT=identificador.valor;
           }else{
              String valorNulo = "Semantic error in line: "+(ileft+1)+", column: "+iright+". The value of the identifier: "+"\""+i+"\" is not initialized.";
              parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,valorNulo));
            }
        }else{
        String TipoError = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" is not Boolean type. Expected: BOOLEAN type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }


              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BOOLEANVAL ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Boolean datatype expected. Line: "+(eleft+1)+", column: "+eright+"."));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BOOLEANVAL",8, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_ARIT ::= ADD_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT="ADD_OP"; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_ARIT ::= SUBS_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT="SUBS_OP"; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",10, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_LOG ::= AND_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT="AND_OP"; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_LOG",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_LOG ::= OR_OP 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT="OR_OP"; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_LOG",11, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_REL ::= EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "EQUAL_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_REL ::= GREATER_EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "GREATER_EQUAL_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_REL ::= LESS_EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "LESS_EQUAL_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_REL ::= NOT_EQUAL_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "NOT_EQUAL_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_REL ::= LESS_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "LESS_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_REL ::= GREATER_OP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    RESULT = "GREATER_OP";

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND ::= BOOLEANVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT = i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND ::= NOT COND 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    if(i.equals("TRUE")){
        RESULT = "FALSE";
    }else if(i.equals("FALSE")){
        RESULT = "TRUE";
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND ::= EXPNUM OP_REL EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    if(o.equals("EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) == Integer.parseInt(e2.toString());
    }else if(o.equals("GREATER_OP")){
        RESULT = Integer.parseInt(e1.toString()) > Integer.parseInt(e2.toString());
    }else if(o.equals("LESS_EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) <= Integer.parseInt(e2.toString());
    }else if(o.equals("NOT_EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) != Integer.parseInt(e2.toString());
    }else if(o.equals("LESS_OP")){
        RESULT = Integer.parseInt(e1.toString()) < Integer.parseInt(e2.toString());
    }else if(o.equals("GEATER_EQUAL_OP")){
        RESULT = Integer.parseInt(e1.toString()) >= Integer.parseInt(e2.toString());
    }
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND ::= PARENTH1 COND PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		
    RESULT = i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND ::= COND OP_LOG COND 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
    if(o.equals("AND_OP")){
        RESULT = (Boolean) c1 && (Boolean) c2;
    } else if (o.equals("OR_OP")){
        RESULT = (Boolean)c1 || (Boolean) c2;
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COND ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: clause condition expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND ::= NOT error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: condition clause expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COND ::= error OP_LOG COND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: condition clause expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND ::= COND OP_LOG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: condition clause expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COND ::= COND error COND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Logic operator expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COND ::= error COND PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COND ::= PARENTH1 COND error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPNUM ::= INTVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        RESULT = (int) i;
        
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPNUM ::= INTVAL OP_ARIT EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
        if(o.equals("ADD_OP")){
            RESULT = (int) e1+(int) e2;
        }else if(o.equals("SUBS_OP")){
            RESULT = (int) e1-(int) e2;
        }
        System.out.println(RESULT+"");
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPNUM ::= PARENTH1 EXPNUM PARENTH2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		
        RESULT = (int) i;
    
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPNUM ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPNUM ::= error OP_ARIT INTVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPNUM ::= INTVAL error INTVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  arithmetic operator expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPNUM ::= INTVAL OP_ARIT error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPNUM ::= error EXPNUM PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left Parenthesis expected ('(') . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPNUM ::= PARENTH1 error PARENTH2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPNUM ::= PARENTH1 EXPNUM error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("EXPNUM",39, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INTVAL ::= NUM 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		RESULT=f; 
parser.valorActual=f; 
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INTVAL",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INTVAL ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Int")){
          TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*FALTA METER EL VALOR A LA TABLA DE SIMBOLOS PARA YA PODER MANDARSELO SINTENTIZADAMENTE*/
          if(identificador.valor != null){
              parser.valorActual=identificador.valor.toString();
               parser.valorActual=identificador.valor;
               RESULT=identificador.valor;
               /*PENDIENTE PARA QUE QUEDE BIEN CUANDO SE LE AGREGA EL VALOR*/
           }else{
              String valorNulo = "Semantic error in line: "+(ileft+1)+", column: "+iright+". The value of the identifier: "+"\""+i+"\" is not initialized.";
              parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,valorNulo));
            }
        }else{
        String TipoError = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" is not type INT. Expected: INT type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }


              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INTVAL",38, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DEC ::= DATA_TYPE ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		

    boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        FCompiler.ts.actualizar(i+"","tipo",parser.tipoActual);
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
    }else{
        String duplicado = "Semantic error in line: "+(ileft+1)+". Identifier:"+"\""+i+"\" is duplicated.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DEC ::= error ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Type Data expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DEC ::= DATA_TYPE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DEC",5, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DATA_STR ::= NODE_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DATA_STR ::= ARRAYSTRING_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DATA_STR ::= FEATURES_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DATA_STR ::= GROUP_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DATA_STR ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: expected data structure. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("DATA_STR",41, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
  boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        System.out.println(" Voy a insertar "+i );
        FCompiler.ts.actualizar(i+"","tipo","NODE");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        System.out.print(">>> "+i+"\n");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
       
         
/*COMPROBANDO QUE EL SEGUNDO ID:f sea de tipo FEATURES*/
        boolean search = FCompiler.ts.buscarLex(f+"");
        if(search){
        System.out.println(" Voy a buscar el tipo "+f );
        String Tipo=FCompiler.ts.RegresarTipo(f+"");
        System.out.println(Tipo);
        if(Tipo.equalsIgnoreCase("FEATURES")){


         /*AQUI IRIA LA ASIGNACION DEL VALOR DE FEATURES Y LOS STRING VAL*/
          FCompiler.ts.actualizar(i+"","nombre",j);
        FCompiler.ts.actualizar(i+"", "trabajo", k);
        FCompiler.ts.actualizar(i+"", "setfeatures", f);
           
        }else{
        String TipoError = "Semantic error in line: "+(fleft+1)+", column: "+fright+". Identifier: "+"\""+f+"\" is not type FEATURES. Expected: FEATURES type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(fleft+1)+", column: "+fright+". Identifier: "+"\""+f+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,NoExiste));
    }


    }else{
        String duplicado = "Error in line: "+(ileft+1)+", column: "+iright+". Identifier:"+"\""+i+"\" is duplicated.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }




              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NODE_STR ::= error ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Node type expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NODE_STR ::= NODE error ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NODE_STR ::= NODE ID error NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: ASSIG('=') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NODE_STR ::= NODE ID ASSIG_OP error NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: 'NEW' expected before Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NODE_STR ::= NODE ID ASSIG_OP NEW error PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: 'NODE' expected before Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE error ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: Left Parenthesis expected ('(') . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 error COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: ID expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID error STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: COMMA_SIGN(',') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN error COMMA_SIGN STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: STRINGVAL expected Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL error STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: COMMA_SIGN(',') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: STRINGVAL expected Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: right Parenthesis expected (')') . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NODE_STR ::= NODE ID ASSIG_OP NEW NODE PARENTH1 ID COMMA_SIGN STRINGVAL COMMA_SIGN STRINGVAL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("NODE_STR",14, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        System.out.println(" Voy a insertar "+i );
        FCompiler.ts.actualizar(i+"","tipo","ARRAYSTRING");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        System.out.print(">>> "+i+"\n");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
         System.out.println(" Voy a insertar "+j );
         FCompiler.ts.actualizar(i+"","valor",j);
         RESULT=i;

    }else{
        String duplicado = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" is duplicated.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ARRAYSTRING_STR ::= error ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ARRAYSTRING type expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ARRAYSTRING_STR ::= ARRAYSTRING error ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ARRAYSTRING_STR ::= ARRAYSTRING ID error NEW BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: ASSIG('=') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP error BRACKET1 ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: 'NEW' expected before Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW error ARRAYVAL BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Braket ('[')  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 error BRACKET2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ArrayList type expected  before  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Braket (']')  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARRAYSTRING_STR ::= ARRAYSTRING ID ASSIG_OP NEW BRACKET1 ARRAYVAL BRACKET2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYSTRING_STR",15, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARRAYVAL ::= STRINGVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
 RESULT=i;


              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARRAYVAL ::= STRINGVAL COMMA_SIGN ARRAYVAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
RESULT= i+","+j;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARRAYVAL ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ARRAYVAL ::= error COMMA_SIGN ARRAYVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ARRAYVAL ::= STRINGVAL error ARRAYVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ARRAYVAL ::= STRINGVAL COMMA_SIGN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  STRINGVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("ARRAYVAL",20, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        System.out.println(" Voy a insertar "+i );
        FCompiler.ts.actualizar(i+"","tipo","FEATURES");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        System.out.print(">>> "+i+"\n");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
        /*voy a introducir el valor del features val*/
        String valores[]=e.toString().split(",");
        if(valores.length==21){
         
            FCompiler.ts.actualizar(i+"","Affability",valores[0]);
            FCompiler.ts.actualizar(i+"","Reasoning",valores[1]);
            FCompiler.ts.actualizar(i+"","Stability",valores[2]);
            FCompiler.ts.actualizar(i+"","Dominance",valores[3]);
            FCompiler.ts.actualizar(i+"","Liveliness",valores[4]);
            FCompiler.ts.actualizar(i+"","CareToStandards",valores[5]);
            FCompiler.ts.actualizar(i+"","Dare",valores[6]);
            FCompiler.ts.actualizar(i+"","Sensitivity",valores[7]);
            FCompiler.ts.actualizar(i+"","Surveillance",valores[8]);
            FCompiler.ts.actualizar(i+"","Abstraction",valores[9]);
            FCompiler.ts.actualizar(i+"","Privacy",valores[10]);
            FCompiler.ts.actualizar(i+"","apprehension",valores[11]);
            FCompiler.ts.actualizar(i+"","OpennessToChange",valores[12]);
            FCompiler.ts.actualizar(i+"","SelfSufficiency",valores[13]);
            FCompiler.ts.actualizar(i+"","Perfectionism",valores[14]);
            FCompiler.ts.actualizar(i+"","Tension",valores[15]);
            FCompiler.ts.actualizar(i+"","Sociability",valores[16]);
            FCompiler.ts.actualizar(i+"","Anxiety",valores[17]);
            FCompiler.ts.actualizar(i+"","Hardness",valores[18]);
            FCompiler.ts.actualizar(i+"","Independence",valores[19]);
            FCompiler.ts.actualizar(i+"","SelfControl",valores[20]);
        
        }
    }else{
        String duplicado = "Semantic error in line: "+(ileft+1)+", column: "+iright +". Identifier:"+"\""+i+"\" is duplicated.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
        System.out.println("No inserto "+ duplicado);
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FEATURES_STR ::= FEATURES error ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ID expected  before. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FEATURES_STR ::= FEATURES ID error NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  ASSIG('=') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FEATURES_STR ::= FEATURES ID ASSIG_OP error FEATURES PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'NEW' expected before Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW error PARENTH1 FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'FEATURES' expected before Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES error FEATURESVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  FeaturesVal type expected  before  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // FEATURES_STR ::= FEATURES ID ASSIG_OP NEW FEATURES PARENTH1 FEATURESVAL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURES_STR",16, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).value;
		int e11left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).right;
		Object e11 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).value;
		int e12left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).right;
		Object e12 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).value;
		int e13left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).left;
		int e13right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).right;
		Object e13 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).value;
		int e14left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).left;
		int e14right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).right;
		Object e14 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).value;
		int e15left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		int e16left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int e16right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e16 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		int e17left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int e17right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e17 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		int e18left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int e18right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e18 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int e19left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int e19right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e19 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int e20left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int e20right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e20 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int e21left = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int e21right = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e21 = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
RESULT=e1+","+e2+","+e3+","+e4+","+e5+","+e6+","+e7+","+e8+","+e9+","+e10+","+e11+","+e12+","+e13+","+e14+","+e15+","+e16+","+e17+","+e18+","+e19+","+e20+","+e21;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FEATURESVAL ::= error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FEATURESVAL ::= EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-39)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FEATURESVAL ::= EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-38)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-37)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-37)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-37)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-36)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-35)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-35)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-35)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-34)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-33)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-33)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-33)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-32)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-31)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-31)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-31)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-30)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-29)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-29)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-29)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-28)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-27)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-27)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-27)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-26)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-25)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-25)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-25)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-24)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-23)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-23)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-23)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-22)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-21)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-21)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-21)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-20)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-19)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-19)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-19)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-18)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-17)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-17)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-17)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-16)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-15)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-15)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-15)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-14)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-13)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-13)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-13)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error COMMA_SIGN EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM error EXPNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // FEATURESVAL ::= EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN EXPNUM COMMA_SIGN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  INTVAL expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURESVAL",21, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // MAIN_BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // MAIN_BODY ::= SENTEN MAIN_BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // MAIN_BODY ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  CURLY('}') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // MAIN_BODY ::= error CURLY_BR2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  "+e+" not expected. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY",2, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // BODY ::= CURLY_BR2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // BODY ::= SENTEN BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCES ::= SENTEN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTENCES",24, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCES ::= SENTEN SENTENCES 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTENCES",24, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTEN ::= INPUT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTEN ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTEN ::= FUNCT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SENTEN ::= DATA_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SENTEN ::= DECLARE_BODY2 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SENTEN ::= CTRL_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SENTEN ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SENTENCE expected 2 . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("SENTEN",23, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean insert = FCompiler.ts.insertar(i+"");
    if(insert){
        System.out.println(" Voy a insertar "+i );
        FCompiler.ts.actualizar(i+"","tipo","GROUP");
        FCompiler.ts.actualizar(i+"", "linea", (ileft+1)+"");
        FCompiler.ts.actualizar(i+"", "columna", iright+"");
        System.out.print(">>> "+i+"\n");
        FCompiler.ts.pushVar("variable",i+"",(ileft+1)+"",(iright+1)+"");
        /*COMPROBAR QUE EL PRIMER ID SEA FEATURES Y EL SEGUNDO ARRAYSTRING*/
        
        /*COMPROBANDO QUE EL SEGUNDO ID:f sea de tipo FEATURES*/
        boolean search = FCompiler.ts.buscarLex(f+"");
    if(search){
        System.out.println(" Voy a buscar el tipo "+f );
        String Tipo=FCompiler.ts.RegresarTipo(f+"");
        System.out.println(Tipo);
        if(Tipo.equalsIgnoreCase("FEATURES")){
          //TSDatos identificador=FCompiler.ts.buscar(f+"");
          /*COMPROBANDO QUE EL SEGUNDO ID:c sea de tipo ARRAYSTRING*/
        boolean search2 = FCompiler.ts.buscarLex(c+"");
    if(search2){
        System.out.println(" Voy a buscar el tipo "+c );
        String Tipo2=FCompiler.ts.RegresarTipo(c+"");
        System.out.println(Tipo2);
        if(Tipo2.equalsIgnoreCase("ARRAYSTRING")){
          //TSDatos identificador=FCompiler.ts.buscar(c+"");


                   /*AQUI YA LE VAMOS AGREGAR LOS VALORES A GROUP*/

                   /*¿que ocupo? - un metodo que me de el atributo features. , un atributo que guarde max o min, valor*/
                    FCompiler.ts.actualizar(i+"", "valor", c);
                    FCompiler.ts.actualizar(i+"", "maxomin", j);
                    FCompiler.ts.actualizar(i+"", "setfeatures", f);



          
        }else{
        String TipoError = "Semantic error in line: "+(cleft+1)+", column: "+cright +". Identifier:"+"\""+c+"\" is not ArrayString type.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,TipoError));
        System.out.println("no se declaro "+ TipoError);
        }
        }else{
        String NoExiste = "Semantic error in line: "+(cleft+1)+", column: "+cright +". Identifier:"+"\""+c+"\" has not been declared";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,NoExiste));
        System.out.println("no se declaro "+ NoExiste);
         }
          
        }else{
        System.out.println("TIPO QUE RECIBIO MAL "+ Tipo);
        String TipoError = "Semantic error in line: "+(fleft+1)+", column: "+fright +". Identifier:"+"\""+f+"\" is not Features type.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,TipoError));
        System.out.println("no se declaro "+ TipoError);
        }
    }else{
        String NoExiste = "Semantic error in line: "+(fleft+1)+", column: "+fright +". Identifier: "+"\""+f+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(fleft+1),fright,NoExiste));
        System.out.println("no se declaro "+ NoExiste);
    }
    
    /*COMPROBANDO QUE EL SEGUNDO ID:c sea de tipo ARRAYSTRING*/
        boolean search2 = FCompiler.ts.buscarLex(c+"");
    if(search2){
        System.out.println(" Voy a buscar el tipo "+c );
        String Tipo2=FCompiler.ts.RegresarTipo(c+"");
        System.out.println(Tipo2);
        if(Tipo2.equalsIgnoreCase("ARRAYSTRING")){
          //TSDatos identificador=FCompiler.ts.buscar(c+"");
          
          
        }else{
        System.out.println("TIPO QUE RECIBIO MAL "+ Tipo2);
        String TipoError = "Semantic error in line: "+(cleft+1)+", column: "+cright +". Identifier:"+"\""+c+"\" is not type ArrayString";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,TipoError));
        System.out.println("no se declaro "+ TipoError);
        }
    }else{
        String NoExiste = "Semantic error in line: "+(cleft+1)+", column: "+cright +". Identifier: "+"\""+c+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(cleft+1),cright,NoExiste));
        System.out.println("no se declaro "+ NoExiste);
    }

    }else{
        String duplicado = "Semantic error in line: "+(ileft+1)+", column: "+iright +". Identifier:"+"\""+i+"\" is duplicated";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,duplicado));
        System.out.println("No inserto "+ duplicado);
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // GROUP_STR ::= GROUP error ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // GROUP_STR ::= GROUP ID error NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ASSIG('=') Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // GROUP_STR ::= GROUP ID ASSIG_OP error GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:'NEW' expected before Missing . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // GROUP_STR ::= GROUP ID ASSIG_OP NEW error PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:  'GROUP' expected before Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP error ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('(') . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 error COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID error MAXMIN COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN error COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SENTENCE('MAX' Or 'MIN' expected . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: COMA SING (',') expected Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')') . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // GROUP_STR ::= GROUP ID ASSIG_OP NEW GROUP PARENTH1 ID COMMA_SIGN MAXMIN COMMA_SIGN ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GROUP_STR",18, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // MAXMIN ::= MAX 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
RESULT=i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAXMIN",19, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // MAXMIN ::= MIN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
RESULT=i;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("MAXMIN",19, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // INPUT ::= READFEAT 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INPUT",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // INPUT ::= READS 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("INPUT",25, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // READFEAT ::= READFEATVAL PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Int")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*FALTA METER EL VALOR A LA TABLA DE SIMBOLOS, pero creo que falta para poderle meter datos con esta funcion.*/
          
        }else{
        String TipoError = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" is not type INT. Expected: INT type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // READFEAT ::= READFEATVAL error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('(')  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // READFEAT ::= READFEATVAL PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before   . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // READFEAT ::= READFEATVAL PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')')  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // READFEAT ::= READFEATVAL PARENTH1 ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READFEAT",29, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // READS ::= READSTRING PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("String")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*FALTA METER EL VALOR A LA TABLA DE SIMBOLOS, pero creo que falta para poderle meter datos con esta funcion.*/
          
        }else{
        String TipoError = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" is not type STRING.  Expected: STRING type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // READS ::= READSTRING error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // READS ::= READSTRING PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // READS ::= READSTRING PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // READS ::= READSTRING PARENTH1 ID PARENTH2 error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("READS",30, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // OUTPUT ::= PLN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // OUTPUT ::= GNGROUP 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // OUTPUT ::= PGPH 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("OUTPUT",26, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // PLN ::= PRINTLN PARENTH1 STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // PLN ::= PRINTLN error STRINGVAL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // PLN ::= PRINTLN PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: STRINGVAL type expected  before . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // PLN ::= PRINTLN PARENTH1 STRINGVAL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // PLN ::= PRINTLN PARENTH1 STRINGVAL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PLN",31, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // GNGROUP ::= GENERATEGROUP PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Group")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
          
        }else{
        String TipoError = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" is not type GROUP. Expected: GROUP type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier:"+"\""+i+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // GNGROUP ::= GENERATEGROUP error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // GNGROUP ::= GENERATEGROUP PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // GNGROUP ::= GENERATEGROUP PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // GNGROUP ::= GENERATEGROUP PARENTH1 ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GNGROUP",32, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // PGPH ::= PRINTGRAPH PARENTH1 ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Group")){

        }else{
        String TipoError = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" is not type GROUP. Expected: GROUP type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // PGPH ::= PRINTGRAPH error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // PGPH ::= PRINTGRAPH PARENTH1 error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // PGPH ::= PRINTGRAPH PARENTH1 ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // PGPH ::= PRINTGRAPH PARENTH1 ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("PGPH",33, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // FUNCT ::= GSIMILITUDE 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // FUNCT ::= GFEATURES 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // FUNCT ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: FUNCT expected Missing  . Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FUNCT",27, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Node")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
          
        }else{
        String TipoError = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" is not type NODE. Expected: NODE type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }
boolean search2 = FCompiler.ts.buscarLex(j+"");
    if(search2){
        String Tipo2=FCompiler.ts.RegresarTipo(j+"");
        if(Tipo2.equalsIgnoreCase("Node")){
          //TSDatos identificador=FCompiler.ts.buscar(j+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
          
        }else{
        String TipoError = "Semantic error in line: "+(jleft+1)+", column: "+jright+". Identifier: "+"\""+j+"\" is not type NODE. Expected: NODE type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(jleft+1),jright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(jleft+1)+", column: "+jright+". Identifier: "+"\""+j+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(jleft+1),jright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // GSIMILITUDE ::= GETSIMILITUDE error ID COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 error COMMA_SIGN ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID error ID PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: COMMA_SIGN(',') Missing. Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // GSIMILITUDE ::= GETSIMILITUDE PARENTH1 ID COMMA_SIGN ID PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GSIMILITUDE",34, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		
boolean search = FCompiler.ts.buscarLex(i+"");
    if(search){
        String Tipo=FCompiler.ts.RegresarTipo(i+"");
        if(Tipo.equalsIgnoreCase("Node")){
          //TSDatos identificador=FCompiler.ts.buscar(i+"");
          /*AQUI SE DEBE CREAR UNA TABLA DE DATOS DE NODE Y DE FEATURE_WORD DEBE RECUPERAR SU VALOR ENTERO*/
            int valor= FCompiler.ts.RegresarValorFeatures(i+"",j+"");
            System.out.println("el valor de feature es: "+valor+"");
            RESULT=valor;
        }else{
        String TipoError = "Semantic error in line: "+(ileft+1)+", columnn: "+iright+". Identifier: "+"\""+i+"\" is not type NODE. Expected: NODE type identifier/value.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,TipoError));
        }
    }else{
        String NoExiste = "Semantic error in line: "+(ileft+1)+", column: "+iright+". Identifier: "+"\""+i+"\" not declared.";
        parser.ManejadorDeErrores.add(new Error1("Semantic Error: ",(ileft+1),iright,NoExiste));
    }

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // GFEATURES ::= GETFEATURES error ID POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // GFEATURES ::= GETFEATURES PARENTH1 error POINT_SIGN FEATURE_WORD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: ID expected  before . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // GFEATURES ::= GETFEATURES PARENTH1 ID error FEATURE_WORD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: POINT SIGN Missing  . Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // GFEATURES ::= GETFEATURES PARENTH1 ID POINT_SIGN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: FEATURE WORD expected. Line:"+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("GFEATURES",35, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // FEATURE_WORD ::= ABSTRACTION PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // FEATURE_WORD ::= AFFABILITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // FEATURE_WORD ::= APPREHESION PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FEATURE_WORD ::= ANXIETY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // FEATURE_WORD ::= CARETOSTANDARDS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // FEATURE_WORD ::= DARE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // FEATURE_WORD ::= DOMINANCE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // FEATURE_WORD ::= HARDNESS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // FEATURE_WORD ::= INDEPENDENCE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // FEATURE_WORD ::= LIVELINESS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // FEATURE_WORD ::= OPENNESSTOCHANGE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // FEATURE_WORD ::= PERFECTIONISM PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // FEATURE_WORD ::= PRIVACY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // FEATURE_WORD ::= REASONING PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // FEATURE_WORD ::= SELFCONTROL PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // FEATURE_WORD ::= SELFSUFFICIENCY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // FEATURE_WORD ::= SENSITIVITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // FEATURE_WORD ::= SOCIABILITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // FEATURE_WORD ::= STABILITY PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // FEATURE_WORD ::= STRESS PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // FEATURE_WORD ::= SURVEILLANCE PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		RESULT=i;
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // FEATURE_WORD ::= ABSTRACTION error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // FEATURE_WORD ::= AFFABILITY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // FEATURE_WORD ::= APPREHESION error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // FEATURE_WORD ::= ANXIETY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // FEATURE_WORD ::= CARETOSTANDARDS error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // FEATURE_WORD ::= DARE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // FEATURE_WORD ::= DOMINANCE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FEATURE_WORD ::= HARDNESS error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FEATURE_WORD ::= APPREHESION error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // FEATURE_WORD ::= INDEPENDENCE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // FEATURE_WORD ::= LIVELINESS error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // FEATURE_WORD ::= OPENNESSTOCHANGE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // FEATURE_WORD ::= PERFECTIONISM error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // FEATURE_WORD ::= PRIVACY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // FEATURE_WORD ::= REASONING error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // FEATURE_WORD ::= SELFCONTROL error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // FEATURE_WORD ::= SELFSUFFICIENCY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // FEATURE_WORD ::= SENSITIVITY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // FEATURE_WORD ::= SOCIABILITY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // FEATURE_WORD ::= STABILITY error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // FEATURE_WORD ::= STRESS error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // FEATURE_WORD ::= SURVEILLANCE error SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // FEATURE_WORD ::= error PARENTH2 SEMICOLON_SIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: FEATURE WORD expected. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Asintactico$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action_part00000001(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Asintactico$result;

      /* select the action based on the action number */
      switch (CUP$Asintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // FEATURE_WORD ::= ABSTRACTION PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // FEATURE_WORD ::= AFFABILITY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // FEATURE_WORD ::= APPREHESION PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // FEATURE_WORD ::= ANXIETY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // FEATURE_WORD ::= CARETOSTANDARDS PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // FEATURE_WORD ::= DARE PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // FEATURE_WORD ::= DOMINANCE PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // FEATURE_WORD ::= HARDNESS PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // FEATURE_WORD ::= APPREHESION PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // FEATURE_WORD ::= INDEPENDENCE PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // FEATURE_WORD ::= LIVELINESS PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // FEATURE_WORD ::= OPENNESSTOCHANGE PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // FEATURE_WORD ::= PERFECTIONISM PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error:Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // FEATURE_WORD ::= PRIVACY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // FEATURE_WORD ::= REASONING PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // FEATURE_WORD ::= SELFCONTROL PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // FEATURE_WORD ::= SELFSUFFICIENCY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // FEATURE_WORD ::= SENSITIVITY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // FEATURE_WORD ::= SOCIABILITY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // FEATURE_WORD ::= STABILITY PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // FEATURE_WORD ::= STRESS PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // FEATURE_WORD ::= SURVEILLANCE PARENTH2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: SEMICOLON(';') Missing. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("FEATURE_WORD",36, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // CTRL_STR ::= LOOP_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("CTRL_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // CTRL_STR ::= IF_STR 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("CTRL_STR",17, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY ELSE CURLY_BR1 BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // IF_STR ::= IF error COND PARENTH2 CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // IF_STR ::= IF PARENTH1 COND error CURLY_BR1 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Rigth Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // IF_STR ::= IF PARENTH1 COND PARENTH2 error BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Brace expected ('['). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // IF_STR ::= IF PARENTH1 COND PARENTH2 CURLY_BR1 BODY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Else malformed. Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("IF_STR",22, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // LOOP_STR ::= LOOP PARENTH1 COND PARENTH2 BODY 
            {
              Object RESULT =null;

              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // LOOP_STR ::= LOOP error COND PARENTH2 BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Left Parenthesis expected ('('). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // LOOP_STR ::= LOOP PARENTH1 COND error BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft-1,eright,"Syntax Error: Right Parenthesis expected (')'). Line: "+(eleft+1)));
              CUP$Asintactico$result = parser.getSymbolFactory().newSymbol("LOOP_STR",28, ((java_cup.runtime.Symbol)CUP$Asintactico$stack.elementAt(CUP$Asintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Asintactico$stack.peek()), RESULT);
            }
          return CUP$Asintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Asintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Asintactico$do_action(
    int                        CUP$Asintactico$act_num,
    java_cup.runtime.lr_parser CUP$Asintactico$parser,
    java.util.Stack            CUP$Asintactico$stack,
    int                        CUP$Asintactico$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Asintactico$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Asintactico$do_action_part00000000(
                               CUP$Asintactico$act_num,
                               CUP$Asintactico$parser,
                               CUP$Asintactico$stack,
                               CUP$Asintactico$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Asintactico$do_action_part00000001(
                               CUP$Asintactico$act_num,
                               CUP$Asintactico$parser,
                               CUP$Asintactico$stack,
                               CUP$Asintactico$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
