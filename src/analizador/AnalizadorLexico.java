/* The following code was generated by JFlex 1.6.1 */

/* --------------------Seccion de codigo de usuario---------------------- */
package analizador;
/*comente*/
import java.util.ArrayList;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Cesar/OneDrive/Documents/NetBeansProjects/GPlusCompiler/src/analizador/alexico.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\2\0\1\3\22\0\1\4\1\55\1\12\3\11\1\56"+
    "\1\10\1\45\1\46\1\6\1\57\1\62\1\7\1\61\1\5\12\2"+
    "\1\0\1\60\1\54\1\44\1\53\1\10\1\0\1\24\1\20\1\31"+
    "\1\37\1\23\1\32\1\30\1\35\1\15\2\1\1\22\1\40\1\16"+
    "\1\21\1\34\1\1\1\27\1\26\1\17\1\42\1\41\1\43\1\36"+
    "\1\33\1\1\1\51\1\0\1\52\1\10\2\0\1\24\1\20\1\31"+
    "\1\37\1\23\1\32\1\30\1\35\1\15\2\1\1\22\1\40\1\16"+
    "\1\21\1\34\1\1\1\27\1\26\1\17\1\42\1\41\1\43\1\36"+
    "\1\33\1\1\1\47\1\1\1\50\43\0\1\11\6\0\1\10\3\0"+
    "\1\10\3\0\1\10\3\0\1\10\2\0\1\11\7\0\1\10\1\0"+
    "\1\11\2\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\1\11\1\11\3\0\1\11\2\0\1\10\4\0\1\11\1\0\1\10"+
    "\1\0\1\11\1\0\1\10\1\0\1\11\1\0\1\11\2\0\1\10"+
    "\3\0\1\11\1\0\1\10\1\10\62\0\2\14\115\0\1\25\u1e9c\0"+
    "\2\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udff2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\3\1"+
    "\10\2\1\1\11\2\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\2\1\1\17\1\20\1\21"+
    "\1\22\1\0\1\4\1\0\1\23\1\0\1\24\1\2"+
    "\1\24\5\2\1\0\10\2\4\0\20\2\1\0\2\2"+
    "\1\25\1\26\1\27\1\30\1\31\1\0\1\23\1\32"+
    "\1\0\1\32\1\2\1\33\1\2\1\34\3\2\1\0"+
    "\2\2\1\0\2\2\1\0\4\2\6\0\16\2\1\0"+
    "\5\2\2\35\1\0\1\2\1\36\1\0\1\2\1\37"+
    "\1\40\2\2\1\0\1\2\1\41\2\42\1\0\1\2"+
    "\1\0\4\2\7\0\7\2\1\0\3\2\1\0\5\2"+
    "\1\0\2\2\2\0\3\2\1\0\2\2\1\43\2\44"+
    "\1\0\3\2\1\0\1\2\1\0\1\2\1\0\4\2"+
    "\10\0\10\2\1\0\1\2\1\0\3\2\1\0\2\2"+
    "\1\45\2\2\2\46\1\2\2\0\3\2\1\0\2\2"+
    "\1\0\3\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\2\2\1\0\1\47\1\50\5\0"+
    "\1\2\1\47\1\50\5\2\1\0\1\2\1\0\3\2"+
    "\1\0\5\2\3\0\4\2\1\0\2\2\1\0\1\2"+
    "\1\51\1\0\1\2\1\0\1\2\2\52\1\0\1\2"+
    "\1\0\1\2\1\0\2\2\6\0\6\2\1\0\1\2"+
    "\1\0\3\2\1\0\2\2\1\0\3\2\1\53\1\0"+
    "\1\54\1\53\1\2\1\54\1\0\1\2\1\0\1\2"+
    "\1\55\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\2\2\6\0\6\2\1\0"+
    "\1\2\1\0\3\2\1\0\2\2\1\0\1\2\2\56"+
    "\1\0\1\2\1\0\1\2\2\57\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\60\5\0\1\60"+
    "\5\2\2\61\1\0\3\2\1\0\2\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\2\62\1\0\1\2\1\0"+
    "\1\2\2\63\1\0\1\2\1\0\1\2\2\64\1\0"+
    "\1\2\5\0\5\2\2\65\2\2\1\0\2\2\1\0"+
    "\1\2\1\0\1\2\2\66\1\0\1\2\1\0\1\2"+
    "\2\67\2\70\1\0\1\2\1\71\1\72\1\0\1\73"+
    "\1\0\1\71\1\72\1\2\1\73\1\2\1\74\1\2"+
    "\1\0\1\2\2\75\1\0\1\2\1\0\1\2\2\76"+
    "\1\0\1\2\2\77\1\0\1\100\1\2\1\100\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\101\2\102\1\0\1\2\2\103\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\2\104"+
    "\2\105\2\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[558];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\63\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\u0594\0\u05c7\0\u05fa\0\u062d\0\63"+
    "\0\63\0\63\0\63\0\u0660\0\u0693\0\u06c6\0\u0132\0\u06f9"+
    "\0\63\0\u072c\0\146\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3"+
    "\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b"+
    "\0\63\0\63\0\63\0\63\0\u0132\0\u0ebe\0\63\0\63"+
    "\0\u0ef1\0\146\0\u0f24\0\146\0\u0f57\0\146\0\u0f8a\0\u0fbd"+
    "\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155"+
    "\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485"+
    "\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d"+
    "\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\63\0\146"+
    "\0\u1782\0\u17b5\0\146\0\u17e8\0\u181b\0\146\0\146\0\u184e"+
    "\0\u1881\0\u18b4\0\u18e7\0\146\0\63\0\146\0\u191a\0\u194d"+
    "\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5"+
    "\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d"+
    "\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15"+
    "\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\146\0\63\0\146\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244"+
    "\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc"+
    "\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574"+
    "\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c"+
    "\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4"+
    "\0\u28d7\0\146\0\u290a\0\u293d\0\63\0\146\0\u2970\0\u29a3"+
    "\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b"+
    "\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3"+
    "\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\63"+
    "\0\63\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\146"+
    "\0\146\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf"+
    "\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267"+
    "\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366\0\u3399\0\u33cc\0\u33ff"+
    "\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe\0\u3531\0\146\0\u3564"+
    "\0\u3597\0\u35ca\0\u35fd\0\63\0\146\0\u3630\0\u3663\0\u3696"+
    "\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e"+
    "\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960\0\u3993\0\u39c6"+
    "\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e"+
    "\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\63\0\u3c90\0\63"+
    "\0\146\0\u3cc3\0\146\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\146"+
    "\0\u3dc2\0\u3df5\0\u3e28\0\u3e5b\0\u3e8e\0\u3ec1\0\u3ef4\0\u3f27"+
    "\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026\0\u4059\0\u408c\0\u40bf"+
    "\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be\0\u41f1\0\u4224\0\u4257"+
    "\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356\0\u4389\0\u43bc\0\u43ef"+
    "\0\u4422\0\u4455\0\u4488\0\u44bb\0\63\0\146\0\u44ee\0\u4521"+
    "\0\u4554\0\u4587\0\63\0\146\0\u45ba\0\u45ed\0\u4620\0\u4653"+
    "\0\u4686\0\u46b9\0\u46ec\0\u471f\0\u4752\0\u4785\0\u47b8\0\u47eb"+
    "\0\u481e\0\u4851\0\u4884\0\u48b7\0\63\0\u48ea\0\u491d\0\u4950"+
    "\0\u4983\0\u49b6\0\146\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u4ab5"+
    "\0\63\0\146\0\u4ae8\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7"+
    "\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6\0\u4d19\0\u4d4c\0\63"+
    "\0\146\0\u4d7f\0\u4db2\0\u4de5\0\u4e18\0\63\0\146\0\u4e4b"+
    "\0\u4e7e\0\u4eb1\0\u4ee4\0\63\0\146\0\u4f17\0\u4f4a\0\u4f7d"+
    "\0\u4fb0\0\u4fe3\0\u5016\0\u5049\0\u507c\0\u50af\0\u50e2\0\u5115"+
    "\0\u5148\0\63\0\146\0\u517b\0\u51ae\0\u51e1\0\u5214\0\u5247"+
    "\0\u527a\0\u52ad\0\u52e0\0\u5313\0\63\0\146\0\u5346\0\u5379"+
    "\0\u53ac\0\u53df\0\63\0\146\0\63\0\146\0\u5412\0\u5445"+
    "\0\63\0\63\0\u5478\0\63\0\u54ab\0\146\0\146\0\u54de"+
    "\0\146\0\u5511\0\146\0\u5544\0\u5577\0\u55aa\0\63\0\146"+
    "\0\u55dd\0\u5610\0\u5643\0\u5676\0\63\0\146\0\u56a9\0\u56dc"+
    "\0\63\0\146\0\u570f\0\63\0\u5742\0\146\0\u5775\0\u57a8"+
    "\0\u57db\0\u580e\0\u5841\0\u5874\0\u58a7\0\u58da\0\u590d\0\u5940"+
    "\0\u5973\0\146\0\63\0\146\0\u59a6\0\u59d9\0\63\0\146"+
    "\0\u5a0c\0\u5a3f\0\u5a72\0\u5aa5\0\u5ad8\0\u5b0b\0\u5b3e\0\u5b71"+
    "\0\63\0\146\0\63\0\146\0\63\0\146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[558];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\2\1\7\1\2"+
    "\1\10\1\11\1\10\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\3\1\31\1\32\1\3\1\33\1\34"+
    "\3\3\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\64\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\16\3\11\0\2\10\5\0\1\10\1\4\2\0"+
    "\1\10\3\0\3\10\1\0\10\10\1\0\16\10\11\0"+
    "\2\10\5\0\2\10\2\0\1\10\1\54\2\0\3\10"+
    "\1\0\10\10\1\0\16\10\11\0\2\10\5\0\2\55"+
    "\1\0\7\55\2\0\10\55\1\0\32\55\4\0\2\10"+
    "\2\0\1\10\3\0\3\10\1\0\10\10\1\0\16\10"+
    "\11\0\2\10\5\0\2\11\1\0\1\56\1\10\3\0"+
    "\1\10\1\57\1\10\1\0\10\11\1\0\16\11\11\0"+
    "\2\10\22\0\1\60\13\0\1\61\31\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\1\3\1\62\6\3\1\0"+
    "\4\3\1\63\11\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\4\3\1\64\1\3\1\65"+
    "\1\3\1\0\16\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\1\3\1\66"+
    "\14\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\4\3\1\67\3\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\6\3\1\70\7\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\71\1\72\3\3"+
    "\1\73\3\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\5\3\1\74\2\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\75\1\3\1\76\4\3"+
    "\1\0\1\3\1\77\2\3\1\100\1\3\1\101\7\3"+
    "\11\0\2\10\23\0\1\102\1\0\1\103\1\0\1\104"+
    "\16\0\1\105\21\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\2\3\1\106\1\3\1\107\1\3\1\110\1\3"+
    "\1\0\14\3\1\111\1\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\112\1\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\6\3\1\113\1\3\1\0\1\3"+
    "\1\114\14\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\7\3\1\115\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\116\1\117\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\6\3\1\120"+
    "\1\3\1\0\1\3\1\121\14\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\7\3\1\122"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\4\3\1\123\1\3\1\124\1\125"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\126\1\127\6\3\1\130\1\0\16\3"+
    "\11\0\2\10\50\0\1\131\62\0\1\132\62\0\1\133"+
    "\17\0\2\10\2\0\1\10\3\0\3\10\1\0\10\10"+
    "\1\0\16\10\1\134\10\0\2\10\5\0\2\10\2\0"+
    "\1\10\3\0\3\10\1\0\10\10\1\0\16\10\11\0"+
    "\1\10\1\135\4\0\6\54\1\136\54\54\1\0\2\55"+
    "\1\0\3\55\1\0\3\55\2\0\10\55\1\0\32\55"+
    "\4\0\2\56\1\0\1\56\5\0\1\137\2\0\10\56"+
    "\1\0\16\56\36\0\1\140\17\0\1\141\24\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\2\3\1\142\5\3"+
    "\1\0\11\3\1\143\4\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\2\3\1\144\5\3"+
    "\1\0\11\3\1\145\4\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\15\3"+
    "\1\146\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\14\3\1\147\1\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\4\3\1\150\3\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\6\3\1\151"+
    "\1\3\1\0\16\3\11\0\2\10\45\0\1\152\22\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\13\3\1\153\2\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\4\3\1\154\3\3\1\0"+
    "\16\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\155\1\156\15\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\10\3\1\157\5\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\160\1\161"+
    "\15\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\1\3\1\162\14\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\4\3\1\163\11\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\6\3\1\164\7\3\11\0\2\10\30\0\1\165\2\0"+
    "\1\166\64\0\1\167\47\0\1\170\3\0\1\171\67\0"+
    "\1\172\34\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\7\3\1\173\1\0\1\3\1\174\14\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\3\3\1\175\12\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\176\3\3"+
    "\1\177\2\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\1\3"+
    "\1\200\14\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\7\3\1\201\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\1\3\1\202\1\203\5\3\1\0\16\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\4\3"+
    "\1\204\3\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\1\3"+
    "\1\205\14\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\7\3\1\206\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\5\3\1\207\2\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\1\3\1\210\14\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\211\1\212\7\3\1\0\16\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\1\3\1\213\14\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\12\3\1\214\3\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\3\3"+
    "\1\215\12\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\1\3\1\216\14\3"+
    "\11\0\2\10\22\0\1\217\45\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\220\6\3\1\0\16\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\221\1\222\7\3\1\0\10\3\1\223\5\3\11\0"+
    "\2\10\4\0\5\54\1\5\1\136\54\54\23\0\1\224"+
    "\40\0\2\3\2\0\1\10\3\0\3\10\1\0\6\3"+
    "\1\225\1\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\226\1\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\6\3\1\227\1\3\1\0\16\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\5\3\1\230\2\3\1\0\16\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\1\3"+
    "\1\231\6\3\1\0\16\3\11\0\2\10\27\0\1\232"+
    "\40\0\2\3\2\0\1\10\3\0\3\10\1\0\6\3"+
    "\1\233\1\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\6\3"+
    "\1\234\7\3\11\0\2\10\27\0\1\235\40\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\236\1\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\237\1\240\7\3\1\0\16\3\11\0"+
    "\2\10\23\0\1\241\44\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\2\3\1\242\5\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\7\3\1\243\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\7\3\1\244\1\0"+
    "\16\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\1\3\1\245\14\3\11\0"+
    "\2\10\24\0\1\246\56\0\2\247\5\0\1\250\53\0"+
    "\2\251\72\0\2\252\66\0\1\253\71\0\1\254\22\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\3\3\1\255"+
    "\4\3\1\0\16\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\247\1\256\5\3\1\257\1\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\251\1\260\7\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\252\1\261\15\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\4\3"+
    "\1\262\11\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\13\3\1\263\2\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\264\1\265\10\3\1\266\4\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\267\1\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\270"+
    "\1\271\3\3\1\272\11\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\14\3"+
    "\1\273\1\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\6\3\1\274\1\3\1\0\16\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\2\3\1\275\5\3\1\0\16\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\276\1\277\15\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\4\3\1\300"+
    "\11\3\11\0\2\10\22\0\1\301\22\0\1\302\22\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\1\3\1\303"+
    "\6\3\1\0\13\3\1\304\2\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\11\3\1\305\4\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\306\1\307\7\3\1\0\16\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\5\3\1\310\2\3\1\0\16\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\6\3"+
    "\1\311\1\3\1\0\16\3\11\0\2\10\22\0\1\312"+
    "\45\0\2\3\2\0\1\10\3\0\3\10\1\0\1\3"+
    "\1\313\6\3\1\0\16\3\11\0\2\10\40\0\1\314"+
    "\27\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\6\3\1\315\7\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\316\1\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\317\6\3\1\0\16\3"+
    "\11\0\2\10\26\0\1\320\41\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\5\3\1\321\2\3\1\0\16\3"+
    "\11\0\2\10\27\0\1\322\40\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\6\3\1\323\1\3\1\0\16\3"+
    "\11\0\2\10\33\0\1\324\34\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\1\3\1\325\14\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\5\3\1\326\10\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\3\3"+
    "\1\327\4\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\330\1\3"+
    "\1\0\16\3\11\0\2\10\20\0\2\331\63\0\1\332"+
    "\71\0\2\333\60\0\1\334\52\0\2\335\72\0\2\336"+
    "\2\0\1\337\54\0\1\340\40\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\331\1\341\7\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\1\3\1\342\6\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\333"+
    "\1\343\15\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\7\3\1\344\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\335"+
    "\1\345\7\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\336\1\346"+
    "\2\3\1\347\12\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\6\3\1\350\1\3\1\0"+
    "\16\3\11\0\2\10\25\0\1\351\42\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\4\3\1\352\3\3\1\0"+
    "\16\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\353\1\354\3\3\1\355\11\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\1\3\1\356\14\3\11\0\2\10"+
    "\20\0\2\357\46\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\357\1\360\7\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\6\3\1\361"+
    "\1\3\1\0\16\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\6\3\1\362"+
    "\7\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\2\3\1\363\5\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\14\3\1\364\1\3\11\0\2\10\27\0"+
    "\1\365\40\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\366\1\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\6\3\1\367"+
    "\1\3\1\0\16\3\11\0\2\10\23\0\1\370\67\0"+
    "\1\371\37\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\2\3\1\372\5\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\7\3\1\373"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\374\6\3\1\0\16\3"+
    "\11\0\2\10\22\0\1\375\45\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\376\6\3\1\0\16\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\7\3\1\377\1\0\16\3\11\0\2\10\27\0"+
    "\1\u0100\40\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\u0101\1\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\7\3\1\u0102"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\6\3\1\u0103\1\3\1\0\16\3"+
    "\11\0\2\10\20\0\2\u0104\46\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\u0104\1\u0105\7\3\1\0\16\3\11\0"+
    "\2\10\23\0\1\u0106\44\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\2\3\1\u0107\5\3\1\0\16\3\11\0"+
    "\2\10\30\0\1\u0108\37\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\7\3\1\u0109\1\0\16\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\u010a\1\u010b\15\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\u010c\1\u010d\7\3\1\0\16\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\7\3\1\u010e\6\3\11\0\2\10"+
    "\26\0\1\u010f\70\0\1\u0110\57\0\2\u0111\54\0\1\u0112"+
    "\61\0\1\u0113\105\0\1\u0114\41\0\1\u0115\55\0\2\u0116"+
    "\46\0\2\3\2\0\1\10\3\0\3\10\1\0\5\3"+
    "\1\u0117\2\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\2\3"+
    "\1\u0118\13\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\u0111\1\u0119\15\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\3\3\1\u011a\4\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\2\3\1\u011b"+
    "\5\3\1\0\16\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\14\3\1\u011c"+
    "\1\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\4\3\1\u011d\3\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\u0116"+
    "\1\u011e\7\3\1\0\16\3\11\0\2\10\22\0\1\u011f"+
    "\45\0\2\3\2\0\1\10\3\0\3\10\1\0\1\3"+
    "\1\u0120\6\3\1\0\16\3\11\0\2\10\23\0\1\u0121"+
    "\44\0\2\3\2\0\1\10\3\0\3\10\1\0\2\3"+
    "\1\u0122\5\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\6\3\1\u0123\1\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\7\3\1\u0124\1\0\16\3\11\0"+
    "\2\10\44\0\1\u0125\23\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\12\3\1\u0126\3\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\7\3\1\u0127\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\4\3\1\u0128\3\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\1\3\1\u0129\14\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\3\3\1\u012a\12\3\11\0\2\10"+
    "\26\0\1\u012b\5\0\1\u012c\63\0\1\u012d\32\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\5\3\1\u012e\2\3"+
    "\1\0\2\3\1\u012f\13\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\3\3"+
    "\1\u0130\12\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\6\3\1\u0131\1\3\1\0\16\3"+
    "\11\0\2\10\30\0\1\u0132\37\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\7\3\1\u0133\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\1\3\1\u0134\14\3\11\0\2\10\22\0"+
    "\1\u0135\45\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\1\3\1\u0136\6\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\1\3\1\u0137"+
    "\6\3\1\0\16\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\u0138\1\u0139\15\3"+
    "\11\0\2\10\22\0\1\u013a\45\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\u013b\6\3\1\0\16\3"+
    "\11\0\2\10\37\0\1\u013c\30\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\5\3\1\u013d\10\3"+
    "\11\0\2\10\35\0\1\u013e\32\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\3\3\1\u013f\12\3"+
    "\11\0\2\10\23\0\1\u0140\44\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\2\3\1\u0141\5\3\1\0\16\3"+
    "\11\0\2\10\26\0\1\u0142\41\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\5\3\1\u0143\2\3\1\0\16\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\6\3\1\u0144\1\3\1\0\16\3\11\0\2\10"+
    "\20\0\2\u0145\61\0\2\u0146\61\0\2\u0147\77\0\1\u0148"+
    "\46\0\1\u0149\66\0\1\u014a\41\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\u0145\1\u014b\7\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\u0146"+
    "\1\u014c\7\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\u0147\1\u014d\7\3\1\0"+
    "\16\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\4\3\1\u014e\11\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\1\3\1\u014f\6\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\5\3\1\u0150"+
    "\2\3\1\0\16\3\11\0\2\10\20\0\2\u0151\46\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\u0151\1\u0152\7\3"+
    "\1\0\16\3\11\0\2\10\33\0\1\u0153\34\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\1\3"+
    "\1\u0154\14\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\7\3\1\u0155\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\2\3\1\u0156\5\3\1\0\16\3\11\0\2\10\20\0"+
    "\2\u0157\46\0\2\3\2\0\1\10\3\0\3\10\1\u0157"+
    "\1\u0158\7\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\2\3\1\u0159\5\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\u015a\1\u015b\15\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\u015c\1\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\2\3\1\u015d"+
    "\5\3\1\0\16\3\11\0\2\10\22\0\1\u015e\73\0"+
    "\1\u015f\66\0\1\u0160\30\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\1\3\1\u0161\6\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\1\3\1\u0162\14\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\5\3\1\u0163\10\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\u0164\1\u0165\15\3"+
    "\11\0\2\10\22\0\1\u0166\45\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\u0167\6\3\1\0\16\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\6\3\1\u0168\1\3\1\0\16\3\11\0\2\10"+
    "\43\0\1\u0169\24\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\11\3\1\u016a\4\3\11\0\2\10"+
    "\31\0\2\u016b\35\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\u016b\1\u016c\15\3\11\0\2\10\27\0"+
    "\1\u016d\40\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\u016e\1\3\1\0\16\3\11\0\2\10\23\0"+
    "\1\u016f\44\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\2\3\1\u0170\5\3\1\0\16\3\11\0\2\10\33\0"+
    "\1\u0171\34\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\1\3\1\u0172\14\3\11\0\2\10\20\0"+
    "\2\u0173\46\0\2\3\2\0\1\10\3\0\3\10\1\u0173"+
    "\1\u0174\7\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u0175\6\3"+
    "\1\0\16\3\11\0\2\10\23\0\1\u0176\65\0\1\u0177"+
    "\101\0\1\u0178\53\0\1\u0179\47\0\1\u017a\65\0\1\u017b"+
    "\41\0\2\3\2\0\1\10\3\0\3\10\1\0\2\3"+
    "\1\u017c\5\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\5\3\1\u017d\2\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\13\3\1\u017e\2\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\4\3\1\u017f\11\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\2\3"+
    "\1\u0180\5\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\5\3\1\u0181\2\3"+
    "\1\0\16\3\11\0\2\10\22\0\1\u0182\45\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u0183\6\3"+
    "\1\0\16\3\11\0\2\10\20\0\2\u0184\46\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\u0184\1\u0185\7\3\1\0"+
    "\16\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\2\3\1\u0186\5\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\6\3\1\u0187\1\3\1\0\16\3\11\0\2\10\26\0"+
    "\1\u0188\41\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\5\3\1\u0189\2\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\14\3\1\u018a\1\3\11\0\2\10\23\0\1\u018b\44\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\2\3\1\u018c"+
    "\5\3\1\0\16\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\u018d\1\u018e\15\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\u018f\1\u0190\7\3\1\0\16\3\11\0\2\10\30\0"+
    "\1\u0191\37\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\7\3\1\u0192\1\0\16\3\11\0\2\10\31\0\2\u0193"+
    "\35\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\u0193\1\u0194\15\3\11\0\2\10\35\0\1\u0195\32\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\3\3\1\u0196\12\3\11\0\2\10\27\0\1\u0197\40\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\6\3\1\u0198"+
    "\1\3\1\0\16\3\11\0\2\10\23\0\1\u0199\44\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\2\3\1\u019a"+
    "\5\3\1\0\16\3\11\0\2\10\31\0\2\u019b\35\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\u019b"+
    "\1\u019c\15\3\11\0\2\10\20\0\2\u019d\46\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\u019d\1\u019e\7\3\1\0"+
    "\16\3\11\0\2\10\20\0\2\u019f\46\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\u019f\1\u01a0\7\3\1\0\16\3"+
    "\11\0\2\10\23\0\1\u01a1\44\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\2\3\1\u01a2\5\3\1\0\16\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\u01a3\1\u01a4\15\3\11\0\2\10\37\0"+
    "\1\u01a5\43\0\2\u01a6\61\0\2\u01a7\61\0\2\u01a8\74\0"+
    "\1\u01a9\57\0\1\u01aa\37\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\5\3\1\u01ab\10\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\u01a6"+
    "\1\u01ac\7\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\u01a7\1\u01ad\7\3\1\0"+
    "\16\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\u01a8\1\u01ae\7\3\1\0\16\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\0\1\3\1\u01af\14\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\7\3\1\u01b0\1\0"+
    "\16\3\11\0\2\10\34\0\1\u01b1\33\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\2\3\1\u01b2"+
    "\13\3\11\0\2\10\22\0\1\u01b3\45\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\1\3\1\u01b4\6\3\1\0"+
    "\16\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\13\3\1\u01b5\2\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\2\3\1\u01b6\13\3\11\0\2\10\20\0"+
    "\2\u01b7\46\0\2\3\2\0\1\10\3\0\3\10\1\u01b7"+
    "\1\u01b8\7\3\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\1\3"+
    "\1\u01b9\14\3\11\0\2\10\30\0\1\u01ba\37\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\7\3\1\u01bb\1\0"+
    "\16\3\11\0\2\10\25\0\1\u01bc\42\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\4\3\1\u01bd\3\3\1\0"+
    "\16\3\11\0\2\10\40\0\1\u01be\27\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\0\6\3\1\u01bf"+
    "\7\3\11\0\2\10\27\0\1\u01c0\40\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\6\3\1\u01c1\1\3\1\0"+
    "\16\3\11\0\2\10\22\0\1\u01c2\45\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\1\3\1\u01c3\6\3\1\0"+
    "\16\3\11\0\2\10\25\0\1\u01c4\42\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\4\3\1\u01c5\3\3\1\0"+
    "\16\3\11\0\2\10\31\0\2\u01c6\35\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\u01c6\1\u01c7\15\3"+
    "\11\0\2\10\25\0\1\u01c8\42\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\4\3\1\u01c9\3\3\1\0\16\3"+
    "\11\0\2\10\22\0\1\u01ca\45\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\u01cb\6\3\1\0\16\3"+
    "\11\0\2\10\37\0\1\u01cc\30\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\5\3\1\u01cd\10\3"+
    "\11\0\2\10\20\0\2\u01ce\46\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\u01ce\1\u01cf\7\3\1\0\16\3\11\0"+
    "\2\10\23\0\1\u01d0\62\0\1\u01d1\74\0\1\u01d2\52\0"+
    "\1\u01d3\57\0\1\u01d4\45\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\2\3\1\u01d5\5\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\2\3\1\u01d6\5\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\3\3\1\u01d7\12\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\4\3\1\u01d8\3\3\1\0"+
    "\16\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\1\3\1\u01d9\6\3\1\0\16\3\11\0"+
    "\2\10\34\0\1\u01da\33\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\2\3\1\u01db\13\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\7\3\1\u01dc\1\0\16\3\11\0\2\10\5\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\10\3\1\0\1\3"+
    "\1\u01dd\14\3\11\0\2\10\23\0\1\u01de\44\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\2\3\1\u01df\5\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\6\3\1\u01e0\1\3\1\0\16\3"+
    "\11\0\2\10\22\0\1\u01e1\45\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\u01e2\6\3\1\0\16\3"+
    "\11\0\2\10\22\0\1\u01e3\45\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\u01e4\6\3\1\0\16\3"+
    "\11\0\2\10\41\0\1\u01e5\26\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\7\3\1\u01e6\6\3"+
    "\11\0\2\10\35\0\1\u01e7\32\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\3\3\1\u01e8\12\3"+
    "\11\0\2\10\35\0\1\u01e9\32\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\3\3\1\u01ea\12\3"+
    "\11\0\2\10\22\0\1\u01eb\45\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\u01ec\6\3\1\0\16\3"+
    "\11\0\2\10\34\0\1\u01ed\33\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\2\3\1\u01ee\13\3"+
    "\11\0\2\10\25\0\1\u01ef\42\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\4\3\1\u01f0\3\3\1\0\16\3"+
    "\11\0\2\10\37\0\1\u01f1\62\0\1\u01f2\43\0\2\u01f3"+
    "\67\0\1\u01f4\71\0\1\u01f5\32\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\5\3\1\u01f6\10\3"+
    "\11\0\2\10\5\0\2\3\2\0\1\10\3\0\3\10"+
    "\1\0\10\3\1\0\5\3\1\u01f7\10\3\11\0\2\10"+
    "\5\0\2\3\2\0\1\10\3\0\3\10\1\u01f3\1\u01f8"+
    "\7\3\1\0\16\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\5\3\1\u01f9\2\3\1\0"+
    "\16\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\3\3\1\u01fa\12\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\5\3\1\u01fb\2\3\1\0\16\3\11\0\2\10\5\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\4\3\1\u01fc"+
    "\3\3\1\0\16\3\11\0\2\10\46\0\1\u01fd\21\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\10\3\1\0"+
    "\14\3\1\u01fe\1\3\11\0\2\10\5\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\10\3\1\u01ff\1\u0200\15\3"+
    "\11\0\2\10\43\0\1\u0201\24\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\11\3\1\u0202\4\3"+
    "\11\0\2\10\20\0\2\u0203\46\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\u0203\1\u0204\7\3\1\0\16\3\11\0"+
    "\2\10\27\0\1\u0205\40\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\u0206\1\3\1\0\16\3\11\0"+
    "\2\10\41\0\1\u0207\26\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\10\3\1\0\7\3\1\u0208\6\3\11\0"+
    "\2\10\22\0\1\u0209\45\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\1\3\1\u020a\6\3\1\0\16\3\11\0"+
    "\2\10\27\0\1\u020b\62\0\1\u020c\40\0\2\3\2\0"+
    "\1\10\3\0\3\10\1\0\6\3\1\u020d\1\3\1\0"+
    "\16\3\11\0\2\10\5\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\u020e\1\3\1\0\16\3\11\0"+
    "\2\10\5\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\14\3\1\u020f\1\3\11\0\2\10\43\0"+
    "\1\u0210\24\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\10\3\1\0\11\3\1\u0211\4\3\11\0\2\10\30\0"+
    "\1\u0212\37\0\2\3\2\0\1\10\3\0\3\10\1\0"+
    "\7\3\1\u0213\1\0\16\3\11\0\2\10\31\0\2\u0214"+
    "\35\0\2\3\2\0\1\10\3\0\3\10\1\0\10\3"+
    "\1\u0214\1\u0215\15\3\11\0\2\10\30\0\1\u0216\37\0"+
    "\2\3\2\0\1\10\3\0\3\10\1\0\7\3\1\u0217"+
    "\1\0\16\3\11\0\2\10\22\0\1\u0218\45\0\2\3"+
    "\2\0\1\10\3\0\3\10\1\0\1\3\1\u0219\6\3"+
    "\1\0\16\3\11\0\2\10\5\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\6\3\1\u021a\7\3"+
    "\11\0\2\10\27\0\1\u021b\40\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\6\3\1\u021c\1\3\1\0\16\3"+
    "\11\0\2\10\33\0\1\u021d\34\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\1\3\1\u021e\14\3"+
    "\11\0\2\10\44\0\1\u021f\23\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\12\3\1\u0220\3\3"+
    "\11\0\2\10\22\0\1\u0221\45\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\1\3\1\u0222\6\3\1\0\16\3"+
    "\11\0\2\10\35\0\1\u0223\32\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\3\3\1\u0224\12\3"+
    "\11\0\2\10\43\0\1\u0225\24\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\11\3\1\u0226\4\3"+
    "\11\0\2\10\34\0\1\u0227\33\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\2\3\1\u0228\13\3"+
    "\11\0\2\10\37\0\1\u0229\30\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\0\5\3\1\u022a\10\3"+
    "\11\0\2\10\31\0\2\u022b\35\0\2\3\2\0\1\10"+
    "\3\0\3\10\1\0\10\3\1\u022b\1\u022c\15\3\11\0"+
    "\2\10\27\0\1\u022d\40\0\2\3\2\0\1\10\3\0"+
    "\3\10\1\0\6\3\1\u022e\1\3\1\0\16\3\11\0"+
    "\2\10\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\30\1\6\11\4\1\4\11"+
    "\1\0\1\1\1\0\1\1\1\0\1\11\7\1\1\0"+
    "\10\1\4\0\20\1\1\0\2\1\4\11\1\1\1\0"+
    "\2\11\1\0\10\1\1\0\2\1\1\0\2\1\1\0"+
    "\4\1\6\0\16\1\1\0\5\1\1\11\1\1\1\0"+
    "\2\1\1\0\5\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\4\1\7\0\7\1\1\0\3\1\1\0"+
    "\5\1\1\0\2\1\2\0\3\1\1\0\3\1\1\11"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\4\1\10\0\10\1\1\0\1\1\1\0\3\1\1\0"+
    "\5\1\1\11\2\1\2\0\3\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\11\5\0\10\1\1\0"+
    "\1\1\1\0\3\1\1\0\5\1\3\0\4\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\6\0"+
    "\6\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0"+
    "\3\1\1\11\1\0\1\11\3\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\6\0\6\1\1\0"+
    "\1\1\1\0\3\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\5\0\6\1\1\11\1\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\5\0\5\1"+
    "\1\11\3\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\2\11\1\0\1\11\1\0"+
    "\7\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\11\3\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[558];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexema;
int contador;
ArrayList<entradaTS> TablaSimbolos;
ArrayList<Error1> ManejadorDeErrores;

    /* Generamos un java_cup.Symbol para guardar el tipo de token encontrado*/
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado junto con su valor*/
    private Symbol symbol(int type,Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
  TablaSimbolos= new ArrayList<entradaTS>();
ManejadorDeErrores= new ArrayList<Error1>();
contador=0;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 336) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
        //System.out.println("Fin del archivo de codigo");
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ManejadorDeErrores.add(new Error1("Lexico",yyline,yycolumn,yytext()));
return symbol(sym.ERRORLEX,yytext());
            }
          case 71: break;
          case 2: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext()+" ID")); 
return symbol(sym.ID,yytext());
            }
          case 72: break;
          case 3: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NUM,new Integer(yytext()));
            }
          case 73: break;
          case 4: 
            { /*IGNORE*/
            }
          case 74: break;
          case 5: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SUBS_OP,yytext());
            }
          case 75: break;
          case 6: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ASSIG_OP,yytext());
            }
          case 76: break;
          case 7: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PARENTH1,yytext());
            }
          case 77: break;
          case 8: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PARENTH2,yytext());
            }
          case 78: break;
          case 9: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.CURLY_BR1,yytext());
            }
          case 79: break;
          case 10: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.CURLY_BR2,yytext());
            }
          case 80: break;
          case 11: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.BRACKET1,yytext());
            }
          case 81: break;
          case 12: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.BRACKET2,yytext());
            }
          case 82: break;
          case 13: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GREATER_OP,yytext());
            }
          case 83: break;
          case 14: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LESS_OP,yytext());
            }
          case 84: break;
          case 15: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ADD_OP,yytext());
            }
          case 85: break;
          case 16: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SEMICOLON_SIGN,yytext());
            }
          case 86: break;
          case 17: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.POINT_SIGN,yytext());
            }
          case 87: break;
          case 18: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.COMMA_SIGN,yytext());
            }
          case 88: break;
          case 19: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STRING,yytext());
            }
          case 89: break;
          case 20: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.IF,yytext());
            }
          case 90: break;
          case 21: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.EQUAL_OP,yytext());
            }
          case 91: break;
          case 22: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GREATER_EQUAL_OP,yytext());
            }
          case 92: break;
          case 23: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LESS_EQUAL_OP,yytext());
            }
          case 93: break;
          case 24: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NOT_EQUAL_OP,yytext());
            }
          case 94: break;
          case 25: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.AND_OP,yytext());
            }
          case 95: break;
          case 26: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.INT_WORD,yytext());
            }
          case 96: break;
          case 27: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NOT,yytext());
            }
          case 97: break;
          case 28: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NEW,yytext());
            }
          case 98: break;
          case 29: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.MIN,yytext());
            }
          case 99: break;
          case 30: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.MAX,yytext());
            }
          case 100: break;
          case 31: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.NODE,yytext());
            }
          case 101: break;
          case 32: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.TRUE,yytext());
            }
          case 102: break;
          case 33: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LOOP,yytext());
            }
          case 103: break;
          case 34: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ELSE,yytext());
            }
          case 104: break;
          case 35: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.DARE,yytext());
            }
          case 105: break;
          case 36: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.MAIN,yytext());
            }
          case 106: break;
          case 37: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GROUP,yytext());
            }
          case 107: break;
          case 38: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.FALSE,yytext());
            }
          case 108: break;
          case 39: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STRING_WORD,yytext());
            }
          case 109: break;
          case 40: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STRESS,yytext());
            }
          case 110: break;
          case 41: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.BOOLEAN_WORD,yytext());
            }
          case 111: break;
          case 42: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ANXIETY,yytext());
            }
          case 112: break;
          case 43: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PRINTLN,yytext());
            }
          case 113: break;
          case 44: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PRIVACY,yytext());
            }
          case 114: break;
          case 45: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.DECLARE,yytext());
            }
          case 115: break;
          case 46: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.FEATURES,yytext());
            }
          case 116: break;
          case 47: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.HARDNESS,yytext());
            }
          case 117: break;
          case 48: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.STABILITY,yytext());
            }
          case 118: break;
          case 49: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.REASONING,yytext());
            }
          case 119: break;
          case 50: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.DOMINANCE,yytext());
            }
          case 120: break;
          case 51: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.LIVELINESS,yytext());
            }
          case 121: break;
          case 52: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.AFFABILITY,yytext());
            }
          case 122: break;
          case 53: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.READSTRING,yytext());
            }
          case 123: break;
          case 54: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PRINTGRAPH,yytext());
            }
          case 124: break;
          case 55: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ABSTRACTION,yytext());
            }
          case 125: break;
          case 56: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.ARRAYSTRING,yytext());
            }
          case 126: break;
          case 57: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SOCIABILITY,yytext());
            }
          case 127: break;
          case 58: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SENSITIVITY,yytext());
            }
          case 128: break;
          case 59: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SELFCONTROL,yytext());
            }
          case 129: break;
          case 60: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.READFEATVAL,yytext());
            }
          case 130: break;
          case 61: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GETFEATURES,yytext());
            }
          case 131: break;
          case 62: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.INDEPENDENCE,yytext());
            }
          case 132: break;
          case 63: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.APPREHESION,yytext());
            }
          case 133: break;
          case 64: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SURVEILLANCE,yytext());
            }
          case 134: break;
          case 65: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GENERATEGROUP,yytext());
            }
          case 135: break;
          case 66: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.GETSIMILITUDE,yytext());
            }
          case 136: break;
          case 67: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.PERFECTIONISM,yytext());
            }
          case 137: break;
          case 68: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.SELFSUFFICIENCY,yytext());
            }
          case 138: break;
          case 69: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.CARETOSTANDARDS,yytext());
            }
          case 139: break;
          case 70: 
            { TablaSimbolos.add(new entradaTS(yyline, yycolumn, contador++, yytext())); 
return symbol(sym.OPENNESSTOCHANGE,yytext());
            }
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
